import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Box from '@tds/core-box';
import { colorGreyShuttle, colorWhite, colorAccessibleGreen, colorCardinal, colorGreyGainsboro } from '@tds/core-colours';
import InputFeedback from '@tds/core-input-feedback';
import Paragraph from '@tds/core-paragraph';
import Text from '@tds/core-text';
import { borders } from '@tds/shared-styles';
import { safeRest } from '@tds/util-helpers';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function find(t,n,r){if("function"==typeof Array.prototype.find)return t.find(n,r);r=r||this;var f=t.length;if("function"!=typeof n)throw new TypeError(n+" is not a function");for(var o=0;o<f;o++)if(n.call(r,t[o],o,t))return t[o]}

var sanitize = function sanitize(text) {
  return text.toString().toLowerCase().replace(/ /g, '-').replace(/[^a-zA-Z0-9-]/g, '');
};

var generateId = function generateId() {
  for (var _len = arguments.length, choices = new Array(_len), _key = 0; _key < _len; _key++) {
    choices[_key] = arguments[_key];
  }

  var id = sanitize(find(choices, function (choice) {
    return choice;
  }));
  return {
    identity: function identity() {
      return id;
    },
    postfix: function postfix(value) {
      return "".concat(id, "_").concat(sanitize(value));
    }
  };
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck = _classCallCheck;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var assertThisInitialized = _assertThisInitialized;

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

var possibleConstructorReturn = _possibleConstructorReturn;

var getPrototypeOf = createCommonjsModule(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
});

var setPrototypeOf = createCommonjsModule(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
});

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

var inherits = _inherits;

var ColoredTextProvider =
/*#__PURE__*/
function (_React$Component) {
  inherits(ColoredTextProvider, _React$Component);

  function ColoredTextProvider() {
    classCallCheck(this, ColoredTextProvider);

    return possibleConstructorReturn(this, getPrototypeOf(ColoredTextProvider).apply(this, arguments));
  }

  createClass(ColoredTextProvider, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        inheritColor: true
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          colorClassName = _this$props.colorClassName,
          className = _this$props.className,
          tag = _this$props.tag,
          children = _this$props.children;
      return React.createElement(tag, {
        className: colorClassName || className
      }, children);
    }
  }]);

  return ColoredTextProvider;
}(React.Component);

ColoredTextProvider.propTypes = {
  colorClassName: PropTypes.string,
  className: PropTypes.string,
  tag: PropTypes.string,
  children: PropTypes.node.isRequired
};
ColoredTextProvider.defaultProps = {
  colorClassName: undefined,
  className: undefined,
  tag: 'div'
};
ColoredTextProvider.childContextTypes = {
  inheritColor: PropTypes.bool
};

var FakeRadio = styled.span.withConfig({
  displayName: "Radio__FakeRadio",
  componentId: "sc-1ifvbpn-0"
})(_extends_1({
  height: '1.25rem',
  width: '1.25rem',
  minHeight: '1.25rem',
  minWidth: '1.25rem',
  outline: 0,
  lineHeight: 0,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  cursor: 'pointer',
  marginTop: '0.125rem',
  transition: 'border-color 0.1s linear, background-color 0.1s linear',
  borderRadius: '50%'
}, borders.thin, {
  borderColor: colorGreyShuttle,
  backgroundColor: colorWhite,
  '& > i': {
    display: 'none'
  }
}));
var HiddenInput = styled.input.withConfig({
  displayName: "Radio__HiddenInput",
  componentId: "sc-1ifvbpn-1"
})({
  position: 'absolute',
  width: '1.2rem',
  height: '1.2rem',
  margin: '2px 1px',
  opacity: '0',
  pointerEvents: 'none'
});
var StyledLabel = styled.label.withConfig({
  displayName: "Radio__StyledLabel",
  componentId: "sc-1ifvbpn-2"
})(function (_ref) {
  var _ref2, _extends2;

  var isError = _ref.isError;
  return _extends_1({
    display: 'flex',
    cursor: 'pointer'
  }, isError && (_ref2 = {
    color: colorCardinal
  }, defineProperty(_ref2, "".concat(HiddenInput, ":checked ~ &"), {
    color: 'initial'
  }), defineProperty(_ref2, "div > ".concat(FakeRadio), {
    borderColor: colorCardinal
  }), _ref2), (_extends2 = {}, defineProperty(_extends2, "".concat(HiddenInput, ":focus ~ & > div > ").concat(FakeRadio), {
    boxShadow: "0 0 4px 1px ".concat(colorGreyShuttle),
    borderColor: isError ? colorCardinal : colorWhite
  }), defineProperty(_extends2, "".concat(HiddenInput, ":checked ~ & > div > ").concat(FakeRadio), {
    '& > span': {
      display: 'block'
    },
    borderColor: colorGreyShuttle
  }), defineProperty(_extends2, "".concat(HiddenInput, ":disabled ~ & > div > ").concat(FakeRadio), {
    borderColor: colorGreyGainsboro
  }), defineProperty(_extends2, "".concat(HiddenInput, ":disabled ~ & > div > div"), {
    color: colorGreyGainsboro
  }), _extends2));
});
var InnerChecked = styled.span.withConfig({
  displayName: "Radio__InnerChecked",
  componentId: "sc-1ifvbpn-3"
})({
  width: '0.75rem',
  height: '0.75rem',
  borderRadius: '50%',
  backgroundColor: colorAccessibleGreen,
  display: 'none'
});
var StyledLabelAndDescriptionBox = styled(Box)({
  width: '100%'
});

var renderError = function renderError(error, errorId) {
  return React.createElement(InputFeedback, {
    id: errorId,
    feedback: "error"
  }, React.createElement(Paragraph, {
    size: "small"
  }, error || ''));
};

var getGeneratedId = function getGeneratedId(name, value) {
  return generateId(name).postfix(value);
};

var getErrorId = function getErrorId(name, value, id) {
  return generateId(id || getGeneratedId(name, value)).postfix('error-message');
};
/**
 * @version ./package.json
 */


var Radio = React.forwardRef(function (_ref3, ref) {
  var id = _ref3.id,
      name = _ref3.name,
      value = _ref3.value,
      label = _ref3.label,
      feedback = _ref3.feedback,
      error = _ref3.error,
      description = _ref3.description,
      rest = objectWithoutProperties(_ref3, ["id", "name", "value", "label", "feedback", "error", "description"]);

  return React.createElement(Box, {
    between: 2
  }, feedback === 'error' && renderError(error, getErrorId(name, value, id)), React.createElement(HiddenInput, _extends_1({
    type: "radio",
    id: id || getGeneratedId(name, value),
    name: name,
    value: value,
    "aria-invalid": feedback === 'error',
    "aria-describedby": feedback === 'error' ? getErrorId(name, value, id) : undefined,
    "data-testid": "hidden-input",
    ref: ref
  }, safeRest(rest))), React.createElement(StyledLabel, {
    isError: feedback === 'error',
    htmlFor: id || getGeneratedId(name, value),
    "data-testid": "checkbox-label"
  }, React.createElement(Box, {
    between: 3,
    inline: true
  }, React.createElement(FakeRadio, {
    "data-testid": "fake-input"
  }, React.createElement(InnerChecked, null)), React.createElement(StyledLabelAndDescriptionBox, {
    between: 2
  }, React.createElement(ColoredTextProvider, null, React.createElement(Text, null, label)), description && React.createElement(Text, {
    size: "small"
  }, description)))));
});
Radio.propTypes = {
  /**
   * The label.
   */
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,

  /**
   * Associate this radio with a group. Set as the HTML name attribute.
   */
  name: PropTypes.string.isRequired,

  /**
   * The value. Must be unique within the group.
   */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]).isRequired,

  /**
   * Use `checked` for controlled radio. For uncontrolled radio, use React's built-in `defaultChecked` prop.
   * See examples below for more details.
   */
  checked: PropTypes.bool,

  /**
   * The id. Must be unique within the group. If no id is provided, one will be generated in the following format: `name_value`
   */
  id: PropTypes.string,

  /**
   * Description text below the radio.
   */
  description: PropTypes.string,

  /**
   * A feedback state.
   */
  feedback: PropTypes.oneOf(['error']),

  /**
   * An error message.
   */
  error: PropTypes.string
};
Radio.defaultProps = {
  id: undefined,
  description: undefined,
  feedback: undefined,
  error: undefined,
  checked: undefined
};
Radio.displayName = 'Radio';

export default Radio;
