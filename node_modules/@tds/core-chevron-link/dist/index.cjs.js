'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var styled = _interopDefault(require('styled-components'));
var utilPropTypes = require('@tds/util-prop-types');
var coreInteractiveIcon = require('@tds/core-interactive-icon');
var Box = _interopDefault(require('@tds/core-box'));
var sharedTypography = require('@tds/shared-typography');
var coreColours = require('@tds/core-colours');
var utilHelpers = require('@tds/util-helpers');

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

/* eslint-disable import/prefer-default-export */
var warn = function warn(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};

var base = {
  display: 'inline-block',
  textDecoration: 'none',
  maxWidth: '100%',
  verticalAlign: 'top'
};
var variantDict = {
  primary: 'default',
  secondary: 'alternative',
  inverted: 'inverted'
};
var StyledChevronLink = styled.a.withConfig({
  displayName: "ChevronLink__StyledChevronLink",
  componentId: "sc-1idt6el-0"
})(sharedTypography.medium, sharedTypography.helveticaNeueRoman55, base, function (_ref) {
  var variant = _ref.variant;
  var color;

  if (variant === 'secondary') {
    color = coreColours.colorSecondary;
  } else if (variant === 'inverted') {
    color = coreColours.colorWhite;
  } else {
    color = coreColours.colorPrimary;
  }

  return {
    '&:link,&:visited': {
      color: color
    }
  };
});
var StyledChevron = styled.span.withConfig({
  displayName: "ChevronLink__StyledChevron",
  componentId: "sc-1idt6el-1"
})(function (_ref2) {
  var direction = _ref2.direction;
  return defineProperty({
    display: 'inline-block',
    transition: 'transform 300ms'
  }, "".concat(StyledChevronLink, ":hover &"), {
    transform: "translateX(".concat(direction === 'right' ? '0.25rem' : '-0.25rem', ")")
  });
});

var getIcon = function getIcon(direction, variant) {
  return React__default.createElement(StyledChevron, {
    direction: direction
  }, direction === 'left' && React__default.createElement(coreInteractiveIcon.ChevronLeft, {
    size: 16,
    variant: variant
  }), direction === 'right' && React__default.createElement(coreInteractiveIcon.ChevronRight, {
    size: 16,
    variant: variant
  }));
};
/**
 * A call to action link.
 *
 * @version ./package.json
 */


var ChevronLink = React.forwardRef(function (_ref4, ref) {
  var reactRouterLinkComponent = _ref4.reactRouterLinkComponent,
      variant = _ref4.variant,
      direction = _ref4.direction,
      children = _ref4.children,
      rest = objectWithoutProperties(_ref4, ["reactRouterLinkComponent", "variant", "direction", "children"]);

  if ((reactRouterLinkComponent || rest.to) && !(reactRouterLinkComponent && rest.to)) {
    warn('Chevron Link', 'The props `reactRouterLinkComponent` and `to` must be used together.');
  }

  var iconVariant = variantDict[variant];
  var innerLink = React__default.createElement(Box, {
    tag: "span",
    inline: true,
    between: 2
  }, direction === 'left' ? getIcon(direction, iconVariant) : undefined, React__default.createElement("span", null, children), direction === 'right' ? getIcon(direction, iconVariant) : undefined);
  return React__default.createElement(StyledChevronLink, _extends_1({}, utilHelpers.safeRest(rest), {
    as: reactRouterLinkComponent || 'a',
    variant: variant,
    direction: direction,
    ref: ref
  }), innerLink);
});
ChevronLink.displayName = 'ChevronLink';
ChevronLink.propTypes = {
  /**
   * The style.
   */
  variant: PropTypes.oneOf(['primary', 'secondary', 'inverted']),

  /**
   * The chevron's direction and placement.
   */
  direction: PropTypes.oneOf(['left', 'right']),

  /**
   * React Router Link component.
   */
  reactRouterLinkComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

  /**
   * Target URL (if using 'reactRouterLinkComponent')
   */
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),

  /**
   * Target URL.
   */
  href: PropTypes.string,

  /**
   * The label. It can include the `A11yContent` component, strings, or strings wrapped in a `<span>`.
   */
  children: utilPropTypes.or([PropTypes.string, utilPropTypes.componentWithName('A11yContent'), utilPropTypes.htmlElement('span')]).isRequired
};
ChevronLink.defaultProps = {
  variant: 'primary',
  direction: 'right',
  reactRouterLinkComponent: null,
  to: null,
  href: null
};

module.exports = ChevronLink;
