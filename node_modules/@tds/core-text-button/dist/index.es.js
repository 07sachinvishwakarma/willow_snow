import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { or, componentWithName } from '@tds/util-prop-types';
import { colorWhite, colorGreyShark, colorGreyGainsboro, colorGreyRaven } from '@tds/core-colours';
import { medium } from '@tds/shared-typography';
import { safeRest } from '@tds/util-helpers';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

var baseButton = {
  boxSizing: 'border-box',
  padding: '0.25rem 0rem',
  cursor: 'pointer',
  background: colorWhite,
  transition: 'all 0.2s ease-in-out',
  position: 'relative',
  borderRadius: '0.1875rem',
  color: colorGreyShark,
  textDecoration: 'underline',
  borderStyle: 'none',
  '&:hover': {
    textDecoration: 'none'
  },
  '&:active': {
    background: colorGreyGainsboro,
    boxShadow: "0 0 0 0.125rem ".concat(colorGreyGainsboro),
    textDecoration: 'underline'
  },
  '&:focus': {
    outline: 'none !important',
    boxShadow: "0 0 0 0.125rem ".concat(colorGreyRaven)
  },
  '@media (prefers-reduced-motion: reduce)': {
    transition: 'none !important'
  }
};
var StyledTextButton = styled.button.withConfig({
  displayName: "TextButton__StyledTextButton",
  componentId: "i04c5a-0"
})(baseButton, medium);
/**
 * @version ./package.json
 */

var TextButton = function TextButton(_ref) {
  var children = _ref.children,
      rest = objectWithoutProperties(_ref, ["children"]);

  return React.createElement(StyledTextButton, safeRest(rest), children);
};

TextButton.propTypes = {
  /**
   * The label. It can include the `A11yContent` component or strings.
   */
  children: or([PropTypes.string, componentWithName('A11yContent')]).isRequired
};

export default TextButton;
export { StyledTextButton };
