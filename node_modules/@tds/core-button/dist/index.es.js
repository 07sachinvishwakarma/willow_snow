import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { or, componentWithName, htmlElement } from '@tds/util-prop-types';
import { borders, forms } from '@tds/shared-styles';
import { medium, boldFont } from '@tds/shared-typography';
import { colorPrimary, colorWhite, colorSecondary, colorText, colorAccessibleGreen, colorTelusPurple, colorWhiteLilac, colorCardinal, colorLavenderBlush } from '@tds/core-colours';
import { safeRest } from '@tds/util-helpers';

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

/* eslint-disable import/prefer-default-export */
var deprecate = function deprecate(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] [Deprecate] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};
var warn = function warn(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};

var preventDisabling = function preventDisabling(_ref) {
  var disabled = _ref.disabled,
      props = objectWithoutProperties(_ref, ["disabled"]);

  if (disabled) {
    warn('Button', 'Buttons are not able to be disabled.');
  }

  return props;
};

var getVariant = function getVariant(_ref2) {
  var variant = _ref2.variant,
      rank = _ref2.rank;
  var backgroundColor;
  var color;
  var border;
  var transition;
  var hover = {};
  var active = {};
  var focus = {};

  if (variant === 'standard' || variant === 'brand' || variant === 'danger') {
    focus.outline = 'none !important';
    transition = 'background 0.2s, color 0.2s, border 0.2s ease';
  } else {
    hover.boxShadow = '0 0 0 0.0625rem';
  }

  switch (variant) {
    case 'primary':
      backgroundColor = colorPrimary;
      color = colorWhite;
      hover.backgroundColor = colorWhite;
      hover.color = colorPrimary;
      break;

    case 'secondary':
      backgroundColor = colorSecondary;
      color = colorWhite;
      hover.backgroundColor = colorWhite;
      hover.color = colorSecondary;
      break;

    case 'inverted':
      backgroundColor = colorWhite;
      color = colorText;
      hover.backgroundColor = 'transparent';
      hover.color = colorWhite;
      break;

    case 'standard':
      if (rank === 'main') {
        backgroundColor = colorAccessibleGreen;
        color = colorWhite;
        hover.backgroundColor = '#1F5C09';
        hover.boxShadow = '0 0 0 0.125rem #1F5C09';
        active.backgroundColor = '#163E06 !important';
        focus.backgroundColor = '#1F5C09';
        focus.boxShadow = "0 0 0 0.1875rem #509F33, 0 0 0 0.125rem ".concat(colorWhite, " inset");
      } else {
        backgroundColor = colorWhite;
        color = colorAccessibleGreen;
        border = "0.0625rem solid ".concat(colorAccessibleGreen);
        hover.boxShadow = "0 0 0 0.125rem ".concat(colorAccessibleGreen);
        active.backgroundColor = '#F4F9F2';
        active.color = '#1F5C09';
        focus.border = '0.0625rem solid #509F33';
        focus.boxShadow = "0 0 0 0.125rem #509F33, 0 0 0 0.125rem ".concat(colorWhite, " inset, 0 0 0 0.1875rem ").concat(colorAccessibleGreen, " inset");
      }

      break;

    case 'brand':
      if (rank === 'main') {
        backgroundColor = colorTelusPurple;
        color = colorWhite;
        hover.backgroundColor = '#371E4F';
        hover.boxShadow = '0 0 0 0.125rem #371E4F';
        active.backgroundColor = '#231332 !important';
        focus.backgroundColor = '#371E4F';
        focus.boxShadow = "0 0 0 0.1875rem #7C53A5 , 0 0 0 0.125rem ".concat(colorWhite, " inset");
      } else {
        backgroundColor = colorWhite;
        color = colorTelusPurple;
        border = "0.0625rem solid ".concat(colorTelusPurple);
        hover.boxShadow = "0 0 0 0.125rem ".concat(colorTelusPurple);
        active.color = '#371E4F';
        active.backgroundColor = "".concat(colorWhiteLilac);
        focus.border = '0.0625rem solid #7C53A5';
        focus.boxShadow = "0 0 0 0.125rem #7C53A5, 0 0 0 0.125rem ".concat(colorWhite, " inset, 0 0 0 0.1875rem ").concat(colorTelusPurple, " inset");
      }

      break;

    case 'danger':
      backgroundColor = colorWhite;
      color = colorCardinal;
      border = "0.0625rem solid ".concat(colorCardinal);
      hover.boxShadow = "0 0 0 0.125rem ".concat(colorCardinal);
      active.color = '#770F1B';
      active.backgroundColor = "".concat(colorLavenderBlush);
      focus.border = '0.0625rem solid #D7707B';
      focus.boxShadow = "0 0 0 0.125rem #D7707B, 0 0 0 0.125rem ".concat(colorWhite, " inset, 0 0 0 0.1875rem ").concat(colorCardinal, " inset");
      break;

    default:
      break;
  }

  return {
    backgroundColor: backgroundColor,
    color: color,
    border: border,
    transition: transition,
    '&:hover': hover,
    '@media (hover: none)': {
      '&:hover': {
        boxShadow: 'none',
        backgroundColor: backgroundColor,
        color: color
      }
    },
    '&:active': active,
    '&:focus': focus,
    '@media (prefers-reduced-motion: reduce)': {
      transition: 'none !important'
    }
  };
};

var StyledButton = styled.button.withConfig({
  displayName: "Button__StyledButton",
  componentId: "sa7xo3-0"
})(borders.none, borders.rounded, medium, boldFont, forms.font, forms.baseButton, getVariant);
var ButtonTextWrapper = styled.span.withConfig({
  displayName: "Button__ButtonTextWrapper",
  componentId: "sa7xo3-1"
})(function (_ref3) {
  var isOldButton = _ref3.isOldButton;
  return {
    width: '100%',
    marginTop: !isOldButton && '-1px'
  };
});

var isDeprecatedButtonVariant = function isDeprecatedButtonVariant(variant) {
  return ['primary', 'secondary'].indexOf(variant) !== -1;
};
/**
 * @version ./package.json
 */


var Button = forwardRef(function (_ref4, ref) {
  var type = _ref4.type,
      variant = _ref4.variant,
      rank = _ref4.rank,
      children = _ref4.children,
      rest = objectWithoutProperties(_ref4, ["type", "variant", "rank", "children"]);

  var restNoDisabled = preventDisabling(rest);

  if (isDeprecatedButtonVariant(variant)) {
    deprecate('@tds/core-button', "The 'primary' and 'secondary' variants have been deprecated. Please see https://tds.telus.com/components/index.html#/Forms?id=button for more details.");
  }

  return React.createElement(StyledButton, _extends_1({}, safeRest(restNoDisabled), {
    variant: variant,
    rank: rank,
    type: type,
    ref: ref
  }), React.createElement(ButtonTextWrapper, {
    isOldButton: isDeprecatedButtonVariant(variant)
  }, children));
});
Button.displayName = 'Button';
Button.propTypes = {
  /**
   * The HTML button type.
   */
  type: PropTypes.oneOf(['button', 'submit', 'reset']),

  /**
   * The style.
   */
  variant: PropTypes.oneOf(['primary', 'secondary', 'inverted', 'standard', 'brand', 'danger']),

  /**
   * Used to specify emphasis. Use 'common' for low-medium emphasis, and use 'main' for the most emphasis
   */
  rank: PropTypes.oneOf(['main', 'common']),

  /**
   * The label. It can include the `A11yContent` component, strings, or strings wrapped in a `<span>`.
   */
  children: or([PropTypes.string, componentWithName('A11yContent'), htmlElement('span')]).isRequired
};
Button.defaultProps = {
  type: 'button',
  variant: 'primary',
  rank: 'common'
};

export default Button;
export { ButtonTextWrapper, StyledButton };
