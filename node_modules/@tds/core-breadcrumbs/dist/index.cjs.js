'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var styled = _interopDefault(require('styled-components'));
var reactHelmet = require('react-helmet');
var utilPropTypes = require('@tds/util-prop-types');
var utilHelpers = require('@tds/util-helpers');
var coreColours = require('@tds/core-colours');
var Link = _interopDefault(require('@tds/core-link'));
var coreResponsive = require('@tds/core-responsive');
var Text = _interopDefault(require('@tds/core-text'));
var sharedTypography = require('@tds/shared-typography');

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck = _classCallCheck;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var assertThisInitialized = _assertThisInitialized;

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

var possibleConstructorReturn = _possibleConstructorReturn;

var getPrototypeOf = createCommonjsModule(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
});

var setPrototypeOf = createCommonjsModule(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
});

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

var inherits = _inherits;

var ColoredTextProvider =
/*#__PURE__*/
function (_React$Component) {
  inherits(ColoredTextProvider, _React$Component);

  function ColoredTextProvider() {
    classCallCheck(this, ColoredTextProvider);

    return possibleConstructorReturn(this, getPrototypeOf(ColoredTextProvider).apply(this, arguments));
  }

  createClass(ColoredTextProvider, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        inheritColor: true
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          colorClassName = _this$props.colorClassName,
          className = _this$props.className,
          tag = _this$props.tag,
          children = _this$props.children;
      return React__default.createElement(tag, {
        className: colorClassName || className
      }, children);
    }
  }]);

  return ColoredTextProvider;
}(React__default.Component);

ColoredTextProvider.propTypes = {
  colorClassName: PropTypes.string,
  className: PropTypes.string,
  tag: PropTypes.string,
  children: PropTypes.node.isRequired
};
ColoredTextProvider.defaultProps = {
  colorClassName: undefined,
  className: undefined,
  tag: 'div'
};
ColoredTextProvider.childContextTypes = {
  inheritColor: PropTypes.bool
};

var item = _extends_1({
  display: 'inline'
}, sharedTypography.sizeSmall, {}, coreResponsive.media.from('md').css(_extends_1({}, sharedTypography.sizeMedium)));

var StyledItemContainer = styled(ColoredTextProvider)(function (_ref) {
  var isCurrent = _ref.isCurrent;
  return _extends_1({}, item, {
    color: isCurrent ? coreColours.colorTelusPurple : coreColours.colorGreyShuttle
  }, isCurrent && {
    fontWeight: 700,
    '&:after': {
      content: "''",
      borderRight: 0,
      margin: 0
    }
  });
});
var StyledSlash = styled.span.withConfig({
  displayName: "Item__StyledSlash",
  componentId: "sc-16xtipq-0"
})(_extends_1({}, item, {
  margin: '0 0.5rem'
}));
var Item = React.forwardRef(function (_ref2, ref) {
  var href = _ref2.href,
      reactRouterLinkComponent = _ref2.reactRouterLinkComponent,
      children = _ref2.children,
      current = _ref2.current,
      rest = objectWithoutProperties(_ref2, ["href", "reactRouterLinkComponent", "children", "current"]);

  var linkOptions = _extends_1({}, rest);

  if (reactRouterLinkComponent) {
    linkOptions.to = href;
    linkOptions.reactRouterLinkComponent = reactRouterLinkComponent;
  } else {
    linkOptions.href = href;
  }

  return React__default.createElement(StyledItemContainer, {
    tag: "li",
    isCurrent: current
  }, current ? React__default.createElement(Text, null, children) : React__default.createElement("span", null, React__default.createElement(Link, _extends_1({}, linkOptions, {
    ref: ref
  }), children), React__default.createElement(StyledSlash, {
    "aria-hidden": "true"
  }, "/")));
});
Item.displayName = 'Item';
Item.propTypes = {
  /**
   * Target URL. This will be converted to `to` if the `reactRouterLinkComponent`
   * prop is provided to the `Item` or parent `Breadcrumbs` element.
   */
  href: PropTypes.string.isRequired,

  /**
   * React Router Link component. This will be passed down from the parent
   * `<Breadcrumbs>` if the parent has a `reactRouterLinkComponent` provided.
   */
  reactRouterLinkComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

  /**
   * Breadcrumb text
   */
  children: PropTypes.node.isRequired,

  /**
   * @ignore
   *
   * Indicates whether or not the Item should be as current/active
   */
  current: PropTypes.bool
};
Item.defaultProps = {
  reactRouterLinkComponent: undefined,
  current: false
};

var StyledList = styled.ol.withConfig({
  displayName: "Breadcrumbs__StyledList",
  componentId: "sc-1wkmsz5-0"
})({
  display: 'flex',
  flexWrap: 'wrap'
});

var omitProps = function omitProps(_ref) {
  var current = _ref.current,
      path = _ref.path,
      breadcrumbName = _ref.breadcrumbName,
      indexRoute = _ref.indexRoute,
      childRoutes = _ref.childRoutes,
      component = _ref.component,
      props = objectWithoutProperties(_ref, ["current", "path", "breadcrumbName", "indexRoute", "childRoutes", "component"]);

  return props;
};

var getBreadcrumbName = function getBreadcrumbName(item, params) {
  if (!item.breadcrumbName) {
    return null;
  }

  var breadcrumbName = item.breadcrumbName;
  Object.keys(params).forEach(function (key) {
    breadcrumbName = breadcrumbName.replace(":".concat(key), params[key]);
  });
  return breadcrumbName;
};

var getPath = function getPath(path, params, concatenatePaths, paths) {
  var p = path;

  if (concatenatePaths) {
    p = p.replace(/^\//, '');
    Object.keys(params).forEach(function (key) {
      p = p.replace(":".concat(key), params[key]);
    });

    if (p) {
      paths.push(p);
    }

    return "/".concat(paths.join('/'));
  }

  return p;
};

var getItems = function getItems(items, params, concatenatePaths) {
  var paths = [];
  return items.filter(function (item) {
    return item.path;
  }).map(function (item, i, filteredItems) {
    var isLast = i === filteredItems.length - 1;
    var breadcrumbName = getBreadcrumbName(item, params);
    var href = getPath(item.path, params, concatenatePaths, paths);
    return _extends_1({
      breadcrumbName: breadcrumbName,
      href: href,
      current: isLast
    }, omitProps(utilHelpers.safeRest(item)));
  });
};

var getStructuredData = function getStructuredData(items, baseUrl) {
  return items.map(function (item, index) {
    return {
      '@type': 'ListItem',
      position: index + 1,
      item: {
        '@id': "".concat(baseUrl || '').concat(item.href),
        name: item.breadcrumbName
      }
    };
  });
};
/**
 * Display a hierarchy of links, commonly used for navigation.
 *
 * @version ./package.json
 */


var Breadcrumbs = function Breadcrumbs(_ref2) {
  var routes = _ref2.routes,
      reactRouterLinkComponent = _ref2.reactRouterLinkComponent,
      _ref2$params = _ref2.params,
      params = _ref2$params === void 0 ? {} : _ref2$params,
      baseUrl = _ref2.baseUrl,
      children = _ref2.children,
      rest = objectWithoutProperties(_ref2, ["routes", "reactRouterLinkComponent", "params", "baseUrl", "children"]);

  var items;

  if (children) {
    items = React__default.Children.toArray(children).map(function (_ref3) {
      var _ref3$props = _ref3.props,
          href = _ref3$props.href,
          breadcrumbName = _ref3$props.children,
          itemRest = objectWithoutProperties(_ref3$props, ["href", "children"]),
          ref = _ref3.ref;

      return _extends_1({
        path: href,
        breadcrumbName: breadcrumbName,
        ref: ref
      }, itemRest);
    });
  } else {
    items = routes.filter(function (route) {
      return route.path && route.breadcrumbName;
    });
  }

  items = getItems(items, params, !children);
  var structuredData = getStructuredData(items, baseUrl);
  return React__default.createElement("nav", utilHelpers.safeRest(rest), React__default.createElement(StyledList, null, items.map(function (_ref4) {
    var href = _ref4.href,
        current = _ref4.current,
        breadcrumbName = _ref4.breadcrumbName,
        linkComponent = _ref4.reactRouterLinkComponent,
        itemRest = objectWithoutProperties(_ref4, ["href", "current", "breadcrumbName", "reactRouterLinkComponent"]);

    return React__default.createElement(Item, _extends_1({}, itemRest, {
      key: href,
      href: href,
      reactRouterLinkComponent: linkComponent || reactRouterLinkComponent,
      current: current
    }), breadcrumbName);
  })), React__default.createElement(reactHelmet.Helmet, null, React__default.createElement("script", {
    type: "application/ld+json"
  }, "\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"BreadcrumbList\",\n  \"itemListElement\": ".concat(JSON.stringify(structuredData), "\n}\n"))));
};

Breadcrumbs.propTypes = {
  /**
   * An array of routes to be displayed as breadcrumbs.
   */
  routes: PropTypes.arrayOf(PropTypes.shape({
    path: PropTypes.string,
    breadcrumbName: PropTypes.string
  })),

  /**
   * Base URL used to build structured data.
   */
  baseUrl: PropTypes.string,

  /**
   * React Router Link component.
   */
  reactRouterLinkComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

  /**
   * React Router params.
   */
  params: PropTypes.object,

  /**
   * A list of Items to be used as an alternative to the `routes` prop.
   */
  children: utilPropTypes.componentWithName('Item', true)
};
Breadcrumbs.defaultProps = {
  routes: undefined,
  baseUrl: undefined,
  reactRouterLinkComponent: undefined,
  params: {},
  children: undefined
};
Breadcrumbs.Item = Item;

module.exports = Breadcrumbs;
