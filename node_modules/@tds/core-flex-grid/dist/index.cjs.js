'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var styled = _interopDefault(require('styled-components'));
var coreResponsive = require('@tds/core-responsive');
var utilHelpers = require('@tds/util-helpers');
var utilPropTypes = require('@tds/util-prop-types');

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

var GutterContext = React.createContext(false);

/* eslint-disable import/prefer-default-export */
var deprecate = function deprecate(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] [Deprecate] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};

var calculateLevel = function calculateLevel(xs, sm, md, lg, xl) {
  var levelToggles = [xs, sm, md, lg, xl];
  var enabledLevels = [false, false, false, false, false];

  for (var toggles = 0; toggles < levelToggles.length; toggles += 1) {
    for (var levels = toggles; levels < enabledLevels.length; levels += 1) {
      if (levelToggles[toggles] !== undefined) {
        enabledLevels[levels] = levelToggles[toggles];
      }
    }
  }

  return enabledLevels;
};

var toPercent = function toPercent(num) {
  return "".concat(num / 12 * 100, "%");
};

var calculateWidth = function calculateWidth(breakpoint, value) {
  if (typeof value === 'undefined') {
    return {};
  }

  if (typeof value === 'number') {
    var percent = toPercent(value);
    return coreResponsive.media.from(breakpoint).css({
      maxWidth: percent,
      flexBasis: percent
    });
  }

  return {
    flexGrow: 1,
    flexBasis: 0,
    maxWidth: '100%'
  };
};

var calculateOffset = function calculateOffset(breakpoint, value) {
  if (typeof value === 'number') {
    var percent = toPercent(value);
    return coreResponsive.media.from(breakpoint).css({
      marginLeft: percent
    });
  }

  return {};
};

var sizeStyles = function sizeStyles(_ref) {
  var xs = _ref.xs,
      sm = _ref.sm,
      md = _ref.md,
      lg = _ref.lg,
      xl = _ref.xl;
  return _extends_1({
    flex: '0 0 auto',
    flexBasis: '100%',
    maxWidth: '100%'
  }, calculateWidth('xs', xs), {}, calculateWidth('sm', sm), {}, calculateWidth('md', md), {}, calculateWidth('lg', lg), {}, calculateWidth('xl', xl));
};

var offsetStyles = function offsetStyles(_ref2) {
  var xsOffset = _ref2.xsOffset,
      smOffset = _ref2.smOffset,
      mdOffset = _ref2.mdOffset,
      lgOffset = _ref2.lgOffset,
      xlOffset = _ref2.xlOffset;
  return _extends_1({}, calculateOffset('xs', xsOffset), {}, calculateOffset('sm', smOffset), {}, calculateOffset('md', mdOffset), {}, calculateOffset('lg', lgOffset), {}, calculateOffset('xl', xlOffset));
};

var StyledCol = styled.div.withConfig({
  displayName: "Col__StyledCol",
  componentId: "sc-15yvjc7-0"
})(sizeStyles, offsetStyles, function (_ref3) {
  var hiddenLevel = _ref3.hiddenLevel,
      gutter = _ref3.gutter,
      horizontalAlignLevel = _ref3.horizontalAlignLevel;
  return _extends_1({
    paddingLeft: gutter ? '1rem' : 0,
    paddingRight: gutter ? '1rem' : 0
  }, coreResponsive.media.until('sm').css({
    display: hiddenLevel[0] === 0 ? 'none' : 'block',
    textAlign: horizontalAlignLevel[0]
  }), {}, coreResponsive.media.from('sm').css({
    display: hiddenLevel[1] === 0 ? 'none' : 'block',
    textAlign: horizontalAlignLevel[1]
  }), {}, coreResponsive.media.from('md').css({
    display: hiddenLevel[2] === 0 ? 'none' : 'block',
    textAlign: horizontalAlignLevel[2]
  }), {}, coreResponsive.media.from('lg').css({
    display: hiddenLevel[3] === 0 ? 'none' : 'block',
    textAlign: horizontalAlignLevel[3]
  }), {}, coreResponsive.media.from('xl').css({
    display: hiddenLevel[4] === 0 ? 'none' : 'block',
    textAlign: horizontalAlignLevel[4]
  }));
});

var Col = function Col(_ref4) {
  var span = _ref4.span,
      offset = _ref4.offset,
      horizontalAlign = _ref4.horizontalAlign,
      children = _ref4.children,
      rest = objectWithoutProperties(_ref4, ["span", "offset", "horizontalAlign", "children"]);

  if (offset) {
    deprecate('core-flex-grid', 'The `offset` prop is deprecated due to the addition of the responsive offset props. Use `xsOffset` instead.');
  }

  if (span) {
    deprecate('core-flex-grid', 'The `span` prop is deprecated due to the addition of the responsive props. Use `xs` instead.');
  }

  var props = _extends_1({}, rest);

  if (offset && !props.xsOffset) {
    props.xsOffset = offset;
  }

  var hiddenLevel = calculateLevel(rest.xs, rest.sm, rest.md, rest.lg, rest.xl);

  var horizontalAlignLevel = function horizontalAlignLevel() {
    if (_typeof_1(horizontalAlign) === 'object') {
      return calculateLevel(horizontalAlign.xs, horizontalAlign.sm, horizontalAlign.md, horizontalAlign.lg, horizontalAlign.xl);
    }

    if (typeof horizontalAlign === 'string') {
      return [horizontalAlign, horizontalAlign, horizontalAlign, horizontalAlign, horizontalAlign];
    }

    return ['inherit', 'inherit', 'inherit', 'inherit', 'inherit'];
  };

  return React.createElement(GutterContext.Consumer, null, function (gutter) {
    return React.createElement(StyledCol, _extends_1({}, utilHelpers.safeRest(props), {
      xs: rest.xs || span || true,
      hiddenLevel: hiddenLevel,
      gutter: gutter,
      horizontalAlignLevel: horizontalAlignLevel()
    }), children);
  });
};
/* eslint-disable react/require-default-props */

/*
 * We're disabling default props since passing undefined props to
 * the react-flexbox-grid component sets up blank classes that may cause
 * styling issues.
 */


Col.propTypes = {
  /**
   * Specify number of columns within the 'xs' breakpoint range. `0` hides the column.
   *
   * `true` sets the column width automatically;
   * `false` disables the prop
   *
   * @since 1.2.0
   */
  xs: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, true, false]),

  /**
   * Specify number of columns within the 'sm' breakpoint range. `0` hides the column.
   *
   * `true` sets the column width automatically;
   * `false` disables the prop
   *
   * @since 1.2.0
   */
  sm: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, true, false]),

  /**
   * Specify number of columns within the 'md' breakpoint range. `0` hides the column.
   *
   * `true` sets the column width automatically;
   * `false` disables the prop
   *
   * @since 1.2.0
   */
  md: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, true, false]),

  /**
   * Specify number of columns within the 'lg' breakpoint range. `0` hides the column.
   *
   * `true` sets the column width automatically;
   * `false` disables the prop
   *
   * @since 1.2.0
   */
  lg: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, true, false]),

  /**
   * Specify number of columns after the 'xl' breakpoint. `0` hides the column.
   *
   * `true` sets the column width automatically;
   * `false` disables the prop
   *
   * @since 1.2.0
   */
  xl: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, true, false]),

  /**
   * Offset the specified number of columns within the 'xs' breakpoint range. `0` hides the column.
   *
   * @since 1.2.0
   */
  xsOffset: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),

  /**
   * Offset the specified number of columns within the 'sm' breakpoint range.
   *
   * @since 1.2.0
   */
  smOffset: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),

  /**
   * Offset the specified number of columns within the 'md' breakpoint range.
   *
   * @since 1.2.0
   */
  mdOffset: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),

  /**
   * Offset the specified number of columns within the 'lg' breakpoint range.
   *
   * @since 1.2.0
   */
  lgOffset: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),

  /**
   * Offset the specified number of columns within the 'xl' breakpoint range.
   *
   * @since 1.2.0
   */
  xlOffset: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),

  /**
   * The columns of the Grid. Will typically be `FlexGrid.Col` components.
   *
   * @since 1.2.0
   */
  children: PropTypes.node.isRequired,

  /**
   * @deprecated Span the specified number of columns.
   * @since 1.2.0
   *
   * Use the xs prop instead for identical functionality.
   */
  span: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

  /**
   * @deprecated Offset the specified number of columns.
   * @since 1.2.0
   *
   * Use the xsOffset prop instead for identical functionality.
   */
  offset: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),

  /**
   * @since 2.3.0
   *
   * Align content horizontally within the column.
   *
   *
   * Accepts a `PropType.string` following the [responsive prop](#/Layout?id=responsive) structure.
   */
  horizontalAlign: utilPropTypes.responsiveProps(PropTypes.string)
};
/* eslint-enable */

Col.defaultProps = {
  span: undefined,
  offset: undefined,
  horizontalAlign: undefined
};

var horizontalAlignStyles = function horizontalAlignStyles(_ref) {
  var horizontalAlign = _ref.horizontalAlign;

  switch (horizontalAlign) {
    case 'start':
      return {
        justifyContent: 'flex-start',
        textAlign: 'left'
      };

    case 'center':
      return {
        justifyContent: 'center',
        textAlign: 'center'
      };

    case 'end':
      return {
        justifyContent: 'flex-end',
        textAlign: 'right'
      };

    default:
      return {};
  }
};

var verticalAlignStyles = function verticalAlignStyles(_ref2) {
  var verticalAlign = _ref2.verticalAlign;

  switch (verticalAlign) {
    case 'top':
      return {
        alignItems: 'flex-start'
      };

    case 'middle':
      return {
        alignItems: 'center'
      };

    case 'bottom':
      return {
        alignItems: 'flex-end'
      };

    default:
      return {};
  }
};

var distributeStyles = function distributeStyles(_ref3) {
  var distribute = _ref3.distribute;
  var justifyContent;

  if (distribute === 'between') {
    justifyContent = 'space-between';
  }

  if (distribute === 'around') {
    justifyContent = 'space-around';
  }

  return {
    justifyContent: justifyContent
  };
};

var StyledRow = styled.div.withConfig({
  displayName: "Row__StyledRow",
  componentId: "sc-1goz0ht-0"
})(horizontalAlignStyles, verticalAlignStyles, distributeStyles, function (_ref4) {
  var reverseLevel = _ref4.reverseLevel;
  return _extends_1({
    width: '100%',
    margin: '0 auto',
    display: 'flex',
    flex: '0 1 auto',
    flexDirection: 'row',
    flexWrap: 'wrap',
    flexShrink: 0
  }, coreResponsive.media.until('sm').css({
    flexDirection: reverseLevel[0] ? 'row-reverse' : 'row'
  }), {}, coreResponsive.media.from('sm').css({
    flexDirection: reverseLevel[1] ? 'row-reverse' : 'row'
  }), {}, coreResponsive.media.from('md').css({
    flexDirection: reverseLevel[2] ? 'row-reverse' : 'row'
  }), {}, coreResponsive.media.from('lg').css({
    flexDirection: reverseLevel[3] ? 'row-reverse' : 'row'
  }), {}, coreResponsive.media.from('xl').css({
    flexDirection: reverseLevel[4] ? 'row-reverse' : 'row'
  }));
});

var Row = function Row(_ref5) {
  var horizontalAlign = _ref5.horizontalAlign,
      verticalAlign = _ref5.verticalAlign,
      distribute = _ref5.distribute,
      xsReverse = _ref5.xsReverse,
      smReverse = _ref5.smReverse,
      mdReverse = _ref5.mdReverse,
      lgReverse = _ref5.lgReverse,
      xlReverse = _ref5.xlReverse,
      children = _ref5.children,
      rest = objectWithoutProperties(_ref5, ["horizontalAlign", "verticalAlign", "distribute", "xsReverse", "smReverse", "mdReverse", "lgReverse", "xlReverse", "children"]);

  var reverseLevel = calculateLevel(xsReverse, smReverse, mdReverse, lgReverse, xlReverse);
  return React.createElement(StyledRow, _extends_1({}, utilHelpers.safeRest(rest), {
    horizontalAlign: horizontalAlign,
    verticalAlign: verticalAlign,
    distribute: distribute,
    reverseLevel: reverseLevel
  }), children);
};

Row.propTypes = {
  /**
   * Align columns horizontally within their row.
   */
  horizontalAlign: PropTypes.oneOf(['start', 'center', 'end']),

  /**
   * Align columns vertically within their row.
   */
  verticalAlign: PropTypes.oneOf(['top', 'middle', 'bottom']),

  /**
   * Distribute empty space around columns.
   */
  distribute: PropTypes.oneOf(['around', 'between']),

  /**
   * Choose if the item order should be reversed from the 'xs' breakpoint. When you pass in false, the order will be normal from the xs breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  xsReverse: PropTypes.bool,

  /**
   * Choose if the item order should be reversed from the 'sm' breakpoint. When you pass in false, the order will be normal from the sm breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  smReverse: PropTypes.bool,

  /**
   * Choose if the item order should be reversed from the 'md' breakpoint. When you pass in false, the order will be normal from the md breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  mdReverse: PropTypes.bool,

  /**
   * Choose if the item order should be reversed from the 'lg' breakpoint. When you pass in false, the order will be normal from the lg breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  lgReverse: PropTypes.bool,

  /**
   * Choose if the item order should be reversed from the 'xl' breakpoint. When you pass in false, the order will be normal from the xl breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  xlReverse: PropTypes.bool,
  children: PropTypes.node.isRequired
};
Row.defaultProps = {
  horizontalAlign: undefined,
  verticalAlign: undefined,
  distribute: undefined,
  xsReverse: undefined,
  smReverse: undefined,
  mdReverse: undefined,
  lgReverse: undefined,
  xlReverse: undefined
};

var rem = function rem(breakpoint) {
  return utilHelpers.pixelToRem(coreResponsive.breakpoints[breakpoint]);
};

var StyledGrid = styled.div.withConfig({
  displayName: "FlexGrid__StyledGrid",
  componentId: "sc-1da2tb5-0"
})(function (_ref) {
  var reverseLevel = _ref.reverseLevel,
      limitWidth = _ref.limitWidth,
      outsideGutter = _ref.outsideGutter;
  return _extends_1({
    display: 'flex',
    flexWrap: 'wrap',
    margin: "0 ".concat(!outsideGutter ? '-1rem' : 'auto'),
    width: !outsideGutter ? undefined : '100%'
  }, coreResponsive.media.until('sm').css({
    flexDirection: reverseLevel[0] ? 'column-reverse' : 'column'
  }), {}, coreResponsive.media.from('sm').css(_extends_1({}, limitWidth && {
    maxWidth: rem('sm')
  }, {
    flexDirection: reverseLevel[1] ? 'column-reverse' : 'column'
  })), {}, coreResponsive.media.from('md').css(_extends_1({}, limitWidth && {
    maxWidth: rem('md')
  }, {
    flexDirection: reverseLevel[2] ? 'column-reverse' : 'column'
  })), {}, coreResponsive.media.from('lg').css(_extends_1({}, limitWidth && {
    maxWidth: rem('lg')
  }, {
    flexDirection: reverseLevel[3] ? 'column-reverse' : 'column'
  })), {}, coreResponsive.media.from('xl').css(_extends_1({}, limitWidth && {
    maxWidth: rem('xl')
  }, {
    flexDirection: reverseLevel[4] ? 'column-reverse' : 'column'
  })));
});
/**
 * A mobile-first flexbox grid.
 *
 * @version ./package.json
 */

var FlexGrid = function FlexGrid(_ref2) {
  var limitWidth = _ref2.limitWidth,
      gutter = _ref2.gutter,
      outsideGutter = _ref2.outsideGutter,
      xsReverse = _ref2.xsReverse,
      smReverse = _ref2.smReverse,
      mdReverse = _ref2.mdReverse,
      lgReverse = _ref2.lgReverse,
      xlReverse = _ref2.xlReverse,
      children = _ref2.children,
      rest = objectWithoutProperties(_ref2, ["limitWidth", "gutter", "outsideGutter", "xsReverse", "smReverse", "mdReverse", "lgReverse", "xlReverse", "children"]);

  var reverseLevel = calculateLevel(xsReverse, smReverse, mdReverse, lgReverse, xlReverse);
  return React.createElement(GutterContext.Provider, {
    value: gutter
  }, React.createElement(StyledGrid, _extends_1({}, utilHelpers.safeRest(rest), {
    outsideGutter: outsideGutter,
    reverseLevel: reverseLevel,
    limitWidth: limitWidth
  }), children));
};

FlexGrid.propTypes = {
  /**
   * Whether or not to give the grid a fixed width. This also centres the grid horizontally.
   */
  limitWidth: PropTypes.bool,

  /**
   * Whether or not to include gutters in between columns.
   */
  gutter: PropTypes.bool,

  /**
   * @since 3.1.0
   * Whether or not to include gutter at the ends to the left and right of the FlexGrid
   */
  outsideGutter: PropTypes.bool,

  /**
   * Choose if the item order should be reversed from the 'xs' breakpoint. When you pass in false, the order will be normal from the xs breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  xsReverse: PropTypes.bool,

  /**
   * Choose if the item order should be reversed from the 'sm' breakpoint. When you pass in false, the order will be normal from the sm breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  smReverse: PropTypes.bool,

  /**
   * Choose if the item order should be reversed from the 'md' breakpoint. When you pass in false, the order will be normal from the md breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  mdReverse: PropTypes.bool,

  /**
   * Choose if the item order should be reversed from the 'lg' breakpoint. When you pass in false, the order will be normal from the lg breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  lgReverse: PropTypes.bool,

  /**
   * Choose if the item order should be reversed from the 'xl' breakpoint. When you pass in false, the order will be normal from the xl breakpoint. By default, it inherits the behaviour set by the preceding prop.
   */
  xlReverse: PropTypes.bool,

  /**
   * The rows and columns of the Grid. Will typically be `FlexGrid.Row` and `FlexGrid.Col` components.
   */
  children: PropTypes.node.isRequired
};
FlexGrid.defaultProps = {
  limitWidth: true,
  gutter: true,
  outsideGutter: true,
  xsReverse: undefined,
  smReverse: undefined,
  mdReverse: undefined,
  lgReverse: undefined,
  xlReverse: undefined
};
FlexGrid.Row = Row;
FlexGrid.Col = Col;

exports.StyledGrid = StyledGrid;
exports.default = FlexGrid;
