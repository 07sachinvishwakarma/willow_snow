import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Box from '@tds/core-box';
import Image from '@tds/core-image';
import { responsiveProps } from '@tds/util-prop-types';
import { colorWhite, colorGreyGainsboro, colorWhiteLilac, colorGreyAthens } from '@tds/core-colours';
import { borders } from '@tds/shared-styles';
import { handleResponsiveStyles, safeRest } from '@tds/util-helpers';

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

/* eslint-disable import/prefer-default-export */
var deprecate = function deprecate(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] [Deprecate] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};

var getVariant = function getVariant(_ref) {
  var variant = _ref.variant;

  if (['white', 'default', 'defaultWithBorder', 'defaultOnlyBorder'].indexOf(variant) >= 0) {
    return {
      boxShadow: variant === 'defaultOnlyBorder' ? undefined : '0 0 16px 0 rgba(0, 0, 0, 0.1)',
      backgroundColor: colorWhite,
      border: variant === 'defaultWithBorder' || variant === 'defaultOnlyBorder' ? "1px solid ".concat(colorGreyGainsboro) : undefined
    };
  }

  if (variant === 'lavender' || variant === 'branded') {
    return {
      backgroundColor: colorWhiteLilac
    };
  }

  return {
    backgroundColor: colorGreyAthens
  };
};

var deprecationWarning = function deprecationWarning(deprecatedVariant) {
  var variants = {
    white: 'default',
    lavendar: 'branded',
    grey: 'alternative'
  };
  return "The ".concat(deprecatedVariant, " variant has been deprecated. Please use the '").concat(variants[deprecatedVariant], "' variant.");
};

var StyledCard = styled(function (_ref2) {
  var fullHeight = _ref2.fullHeight,
      props = objectWithoutProperties(_ref2, ["fullHeight"]);

  return React.createElement(Box, props);
})(borders.none, borders.rounded, getVariant, function (_ref3) {
  var fullHeight = _ref3.fullHeight;

  if (fullHeight) {
    return {
      height: '100%'
    };
  }

  return {};
});

var fullBleedImageStyles = function fullBleedImageStyles(fullBleedImage) {
  return fullBleedImage && fullBleedImage.position && handleResponsiveStyles({
    position: fullBleedImage.position
  }, function (_ref4) {
    var position = _ref4.position;
    if (!fullBleedImage) return {};
    var direction = {
      left: 'row',
      right: 'row-reverse',
      top: 'column',
      bottom: 'column-reverse',
      none: 'row'
    };
    var styles = {
      display: 'flex',
      flexDirection: direction[position],
      justifyContent: 'space-between',
      '> img': {
        display: position === 'none' ? 'none' : 'block',
        margin: 'auto'
      }
    };
    return styles;
  });
};

var StyledImageCard = styled(function (_ref5) {
  var fullBleedImage = _ref5.fullBleedImage,
      props = objectWithoutProperties(_ref5, ["fullBleedImage"]);

  return React.createElement("div", props);
})(function (_ref6) {
  var fullBleedImage = _ref6.fullBleedImage;
  return fullBleedImageStyles(fullBleedImage);
});
/**
 * A content container.
 *
 * @version ./package.json
 */

var Card = function Card(_ref7) {
  var variant = _ref7.variant,
      children = _ref7.children,
      fullHeight = _ref7.fullHeight,
      spacing = _ref7.spacing,
      fullBleedImage = _ref7.fullBleedImage,
      rest = objectWithoutProperties(_ref7, ["variant", "children", "fullHeight", "spacing", "fullBleedImage"]);

  if (variant === 'white' || variant === 'lavendar' || variant === 'grey') {
    deprecate('@tds/core-card', deprecationWarning(variant));
  }

  var spacingProps = {};

  if (spacing === 'default') {
    spacingProps.vertical = 5;
    spacingProps.horizontal = 4;
  } else if (spacing === 'narrow') {
    spacingProps.vertical = 4;
    spacingProps.horizontal = 3;
  } else if (spacing === 'compact') {
    spacingProps.inset = 3;
  } else if (spacing === 'intermediate') {
    spacingProps.inset = 4;
  }

  if (fullBleedImage) {
    return React.createElement(StyledCard, _extends_1({}, safeRest(rest), {
      fullHeight: fullHeight,
      variant: variant
    }), React.createElement(StyledImageCard, {
      fullBleedImage: fullBleedImage
    }, React.createElement(Image, {
      src: fullBleedImage.src,
      width: fullBleedImage.width,
      height: fullBleedImage.height,
      alt: fullBleedImage.alt
    }), React.createElement(Box, spacingProps, children)));
  }

  return React.createElement(StyledCard, _extends_1({}, safeRest(rest), {
    fullHeight: fullHeight,
    variant: variant
  }, spacingProps), children);
};

Card.propTypes = {
  /**
   * The style.
   *
   * @since 2.5.0  added `defaultOnlyBorder`.
   *
   * **Deprecated:** `white`, `lavendar`,`grey`
   */
  variant: PropTypes.oneOf(['white', 'lavender', 'grey', 'default', 'branded', 'alternative', 'defaultWithBorder', 'defaultOnlyBorder']),

  /**
   * The content. Can be text, any HTML element, or any component.
   */
  children: PropTypes.node.isRequired,

  /**
   * Sets the `Card`'s `height` equal to its parent.
   */
  fullHeight: PropTypes.bool,
  spacing: PropTypes.oneOf(['default', 'narrow', 'compact', 'intermediate']),
  fullBleedImage: PropTypes.shape({
    src: PropTypes.string.isRequired,
    width: PropTypes.number.isRequired,
    height: PropTypes.number.isRequired,
    alt: PropTypes.string.isRequired,
    position: responsiveProps(PropTypes.oneOf(['left', 'right', 'top', 'bottom', 'none'])).isRequired
  })
};
Card.defaultProps = {
  variant: 'default',
  fullHeight: false,
  spacing: 'default',
  fullBleedImage: undefined
};

export default Card;
export { StyledCard };
