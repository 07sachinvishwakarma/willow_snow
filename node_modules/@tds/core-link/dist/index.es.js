import React, { useCallback } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { links } from '@tds/shared-styles';
import { safeRest } from '@tds/util-helpers';
import { componentWithName } from '@tds/util-prop-types';
import { withForwardedRef } from '@tds/shared-hocs';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

// colours
var colorGainsboro = '#d8d8d8';
var colorWhite = '#fff'; // grey

var colorGreyShark = '#2a2c2e';
var colorGreyRaven = '#71757b';

/* eslint-disable import/prefer-default-export */
var warn = function warn(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};

var base = _extends_1({}, links.focusOutline, {
  '&:link,&:visited': {
    color: colorGreyShark,
    textDecoration: 'underline'
  },
  '&:hover': {
    textDecoration: 'none'
  },
  '& svg': {}
});

var states = function states(_ref) {
  var invert = _ref.invert;
  return {
    '&:active': {
      color: invert && colorGainsboro,
      backgroundColor: invert ? 'rgba(0,0,0,0.4)' : colorGainsboro,
      borderRadius: '0.25rem',
      padding: '0.125rem',
      margin: '-0.125rem',
      textDecoration: 'underline'
    },
    '&:focus': {
      border: "0.125rem solid ".concat(invert ? colorWhite : colorGreyRaven),
      padding: '0.125rem',
      margin: '-0.25rem',
      // (border + padding) * -1
      borderRadius: '0.25rem',
      outline: 'none'
    }
  };
};

var StyledLink = styled.a.withConfig({
  displayName: "Link__StyledLink",
  componentId: "sc-1bokult-0"
})(base, {
  '& svg': {
    transition: 'transform 150ms ease-in-out'
  },
  '&:hover svg': {
    transform: 'scale(1.1, 1.1)'
  },
  '&:active svg': {
    transform: 'scale(1, 1)'
  }
}, function (_ref2) {
  var invert = _ref2.invert,
      context = _ref2.context;

  if (context.inheritColor) {
    return {
      '&:link,&:visited': {
        color: 'inherit'
      }
    };
  }

  if (invert) {
    return {
      '&:link,&:visited': {
        color: colorWhite
      }
    };
  }

  return {};
}, states, function (_ref3) {
  var hasIcon = _ref3.hasIcon;

  if (hasIcon) {
    return {
      display: 'inline-block',
      '& > svg': {
        verticalAlign: 'bottom'
      }
    };
  }

  return {};
});
/**
 * @version ./package.json
 */

var Link = function Link(_ref4, context) {
  var reactRouterLinkComponent = _ref4.reactRouterLinkComponent,
      invert = _ref4.invert,
      children = _ref4.children,
      forwardedRef = _ref4.forwardedRef,
      Icon = _ref4.icon,
      iconPosition = _ref4.iconPosition,
      rest = objectWithoutProperties(_ref4, ["reactRouterLinkComponent", "invert", "children", "forwardedRef", "icon", "iconPosition"]);

  if (!(reactRouterLinkComponent && rest.to) && (reactRouterLinkComponent || rest.to)) {
    warn('Link', 'The props `reactRouterLinkComponent` and `to` must be used together.');
  }

  var renderChildren = useCallback(function () {
    if (Icon) {
      return React.createElement(React.Fragment, null, iconPosition === 'left' && React.createElement(Icon, {
        color: invert ? 'white' : 'greyShark',
        style: {
          marginRight: '0.5rem'
        }
      }), children, iconPosition === 'right' && React.createElement(Icon, {
        color: invert ? 'white' : 'greyShark',
        style: {
          marginLeft: '0.25rem'
        }
      }));
    }

    return children;
  }, [children, Icon, iconPosition, invert]);
  return React.createElement(StyledLink, _extends_1({}, safeRest(rest), {
    as: reactRouterLinkComponent || 'a',
    invert: invert,
    context: context,
    ref: forwardedRef,
    hasIcon: !!Icon
  }), renderChildren());
};

Link.propTypes = {
  /**
   * React Router Link component.
   */
  reactRouterLinkComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

  /**
   * Target URL (if using 'reactRouterLinkComponent')
   */
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),

  /**
   * Target URL.
   */
  href: PropTypes.string,

  /**
   * Invert link style to appear light on dark backgrounds.
   */
  invert: PropTypes.bool,

  /**
   * Link text.
   */
  children: PropTypes.node.isRequired,

  /**
   * @ignore
   */
  forwardedRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),

  /**
   * Provide an icon from the Dependent icon group in `@tds/core-interactive-icon`.
   * @since 2.2.0
   */
  icon: componentWithName('Dependent', true),

  /**
   * When `icon` is provided, use `iconPosition` to place the Icon to the left or right side of Link.
   * @since 2.2.0
   */
  iconPosition: PropTypes.oneOf(['left', 'right'])
};
Link.defaultProps = {
  reactRouterLinkComponent: null,
  to: null,
  href: null,
  invert: undefined,
  forwardedRef: undefined,
  icon: undefined,
  iconPosition: 'left'
};
Link.contextTypes = {
  inheritColor: PropTypes.bool
};
var Link$1 = withForwardedRef(Link);

export default Link$1;
