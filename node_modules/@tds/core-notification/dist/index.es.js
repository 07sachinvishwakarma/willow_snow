import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { colorWhiteLilac } from '@tds/core-colours';
import FlexGrid from '@tds/core-flex-grid';
import { NotificationSuccess, NotificationError, NotificationWarning } from '@tds/core-feedback-icon';
import { IconButton, Close } from '@tds/core-interactive-icon';
import Paragraph from '@tds/core-paragraph';
import Box from '@tds/core-box';
import { Reveal, Fade } from '@tds/shared-animation';
import { messaging } from '@tds/shared-styles';
import { safeRest, getCopy } from '@tds/util-helpers';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck = _classCallCheck;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var assertThisInitialized = _assertThisInitialized;

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

var possibleConstructorReturn = _possibleConstructorReturn;

var getPrototypeOf = createCommonjsModule(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
});

var setPrototypeOf = createCommonjsModule(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
});

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

var inherits = _inherits;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

var copyDictionary = {
  en: {
    feedback: 'en',
    close: 'Close'
  },
  fr: {
    feedback: 'fr',
    close: 'Fermer'
  }
};

/* eslint-disable import/prefer-default-export */
var warn = function warn(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};

var StyledNotificationContainer = styled(function (_ref) {
  var variant = _ref.variant,
      rest = objectWithoutProperties(_ref, ["variant"]);

  return React.createElement(Box, rest);
})(function (_ref2) {
  var variant = _ref2.variant;
  return _extends_1({
    position: 'relative'
  }, {
    instructional: messaging.standard,
    success: messaging.success,
    error: messaging.error,
    warning: messaging.warning,
    branded: {
      backgroundColor: colorWhiteLilac
    }
  }[variant]);
});
var StyledIconContainer = styled(function (_ref3) {
  var rest = _extends_1({}, _ref3);

  return React.createElement(Box, rest);
})({
  lineHeight: 0
});
var StyledDismissButtonWrapper = styled.div.withConfig({
  displayName: "Notification__StyledDismissButtonWrapper",
  componentId: "sc-2ooxvf-0"
})({
  marginLeft: 'auto',
  height: '1.5rem',
  position: 'relative',
  marginTop: '-0.5rem',
  marginRight: '-0.5rem'
});

var isImportant = function isImportant(variant) {
  return variant === 'success' || variant === 'error' || variant === 'warning';
};

var renderIcon = function renderIcon(variant, copy) {
  var feedback = getCopy(copyDictionary, copy).feedback;
  var iconCopy = _typeof_1(copy) === 'object' && copy.feedback ? {
    a11yText: feedback
  } : feedback;

  if (variant === 'success') {
    return React.createElement(NotificationSuccess, {
      copy: iconCopy
    });
  }

  if (variant === 'error') {
    return React.createElement(NotificationError, {
      copy: iconCopy
    });
  }

  if (variant === 'warning') {
    return React.createElement(NotificationWarning, {
      copy: iconCopy
    });
  }

  return undefined;
};
/**
 * A banner that highlights important messages.
 *
 * @version ./package.json
 */


var Notification =
/*#__PURE__*/
function (_React$Component) {
  inherits(Notification, _React$Component);

  function Notification() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, Notification);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Notification)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(_this), "state", {
      dismissed: false,
      contentWrapperHeight: undefined
    });

    defineProperty(assertThisInitialized(_this), "adjustContentHeight", function () {
      // TODO - temporary workaround to prevent crash
      if (_this.contentWrapper && _this.contentWrapper.offsetHeight !== _this.state.contentWrapperHeight) {
        _this.setState({
          contentWrapperHeight: _this.contentWrapper.offsetHeight
        });
      }
    });

    return _this;
  }

  createClass(Notification, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.dismissible) {
        window.addEventListener('resize', this.adjustContentHeight);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.adjustContentHeight);
    }
  }, {
    key: "renderNotification",
    value: function renderNotification() {
      var _this2 = this;

      var _this$props = this.props,
          variant = _this$props.variant,
          dismissible = _this$props.dismissible,
          children = _this$props.children,
          onExit = _this$props.onExit,
          onDismiss = _this$props.onDismiss,
          copy = _this$props.copy,
          rest = objectWithoutProperties(_this$props, ["variant", "dismissible", "children", "onExit", "onDismiss", "copy"]);

      return React.createElement(StyledNotificationContainer, _extends_1({}, safeRest(rest), {
        vertical: 3,
        variant: variant
      }), React.createElement(FlexGrid, null, React.createElement(FlexGrid.Row, null, React.createElement(FlexGrid.Col, null, React.createElement(FlexGrid, {
        gutter: false
      }, React.createElement(FlexGrid.Row, null, React.createElement(FlexGrid.Col, null, React.createElement(Box, {
        inline: true,
        between: 3
      }, React.createElement(Box, {
        inline: true,
        between: 3,
        style: {
          justifyContent: 'center'
        }
      }, isImportant(variant) && React.createElement(StyledIconContainer, {
        vertical: 1
      }, renderIcon(variant, copy)), React.createElement(Paragraph, null, children)), dismissible && React.createElement(StyledDismissButtonWrapper, null, React.createElement(IconButton, {
        icon: Close,
        a11yText: getCopy(copyDictionary, copy).close,
        onClick: function onClick() {
          _this2.setState(function () {
            return {
              dismissed: true
            };
          });

          if (onDismiss) {
            onDismiss();
          }
        }
      }))))))))));
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props2 = this.props,
          variant = _this$props2.variant,
          dismissible = _this$props2.dismissible,
          onExit = _this$props2.onExit,
          onDismiss = _this$props2.onDismiss;

      if (onExit && !dismissible) {
        warn('Notification', 'The prop `onExit` must be used together with `dismissible`.');
      }

      if (onDismiss && !dismissible) {
        warn('Notification', 'The prop `onDismiss` must be used together with `dismissible`.');
      }

      if (variant === 'error' && dismissible) {
        warn('Notification', 'Error notifications should not be dismissible.');
      }

      if (variant === 'warning' && dismissible) {
        warn('Notification', 'Warning notifications should not be dismissible.');
      }

      if (dismissible) {
        var fadeDuration = 500;
        var revealDuration = 400;
        return React.createElement(Reveal, {
          timeout: revealDuration,
          delay: fadeDuration,
          in: !this.state.dismissed,
          height: this.state.contentWrapperHeight || 'auto',
          unmountOnExit: true
        }, function () {
          return React.createElement(Fade, {
            timeout: fadeDuration,
            in: !_this3.state.dismissed,
            onExited: onExit
          }, function () {
            return React.createElement("div", {
              ref: function ref(c) {
                _this3.contentWrapper = c;
              }
            }, _this3.renderNotification());
          });
        });
      }

      return this.renderNotification();
    }
  }]);

  return Notification;
}(React.Component);

Notification.propTypes = {
  /**
   * The appearance.
   */
  variant: PropTypes.oneOf(['instructional', 'branded', 'success', 'error', 'warning']),

  /**
   * Use the copy prop to either select provided English or French copy
   * by passing `'en'` or `'fr'` respectively.
   *
   * To provide your own, pass a JSON object with the keys
   * `feedback` for the `FeedbackIcon` and `close` for the `InteractiveIcon` used as the close button.
   */
  copy: PropTypes.oneOfType([PropTypes.oneOf(['en', 'fr']), PropTypes.shape({
    feedback: PropTypes.string.isRequired,
    close: PropTypes.string.isRequired
  })]).isRequired,

  /**
   * Whether or not to allow the Notificiation to be dismissed.
   *
   * @since 1.2.0
   */
  dismissible: PropTypes.bool,

  /**
   * A callback function to be run on click of the dismissible icon.
   * Requires `dismissible={true}`
   *
   * @since 1.3.0
   */
  onDismiss: PropTypes.func,

  /**
   * A callback function to be run when the Notification has fully played its exit animation
   * Requires `dismissible={true}`
   *
   * @since 1.3.0
   */
  onExit: PropTypes.func,

  /**
   * The message. Can be raw text or text components.
   */
  children: PropTypes.node.isRequired
};
Notification.defaultProps = {
  variant: 'instructional',
  dismissible: false,
  onDismiss: undefined,
  onExit: undefined
};

export default Notification;
