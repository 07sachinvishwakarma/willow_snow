'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var utilPropTypes = require('@tds/util-prop-types');
var Box = _interopDefault(require('@tds/core-box'));
var utilHelpers = require('@tds/util-helpers');
var PropTypes = _interopDefault(require('prop-types'));
var Text = _interopDefault(require('@tds/core-text'));
var Heading = _interopDefault(require('@tds/core-heading'));

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

/* eslint-disable import/prefer-default-export */
var warn = function warn(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};

/**
 * @version ../package.json
 */

var BenefitItem = function BenefitItem(_ref) {
  var Icon = _ref.icon,
      heading = _ref.heading,
      children = _ref.children,
      rest = objectWithoutProperties(_ref, ["icon", "heading", "children"]);

  if (Icon === undefined || typeof Icon === 'undefined') {
    warn('BenefitWitHeading', 'An icon must be set in either BenefitWithHeading or BenefitWithHeading.Item.');
  }

  return React.createElement(Box, _extends_1({}, utilHelpers.safeRest(rest), {
    between: 3,
    inline: true,
    tag: "li"
  }), Icon && React.createElement(Box, {
    vertical: 1
  }, React.createElement(Icon, {
    size: 24,
    variant: "default"
  })), React.createElement("div", null, React.createElement(Heading, {
    level: "h4",
    tag: "div"
  }, heading), React.createElement(Text, {
    size: "small"
  }, children)));
};

BenefitItem.propTypes = {
  /**
   * A DecorativeIcon. This will override any `icon` prop set in the parent.
   */
  icon: utilPropTypes.componentWithName('DecorativeIcon', true),

  /**
   * Heading text.
   */
  heading: PropTypes.string.isRequired,

  /**
   * An item in the Benefit list
   */
  children: PropTypes.node.isRequired
};
BenefitItem.defaultProps = {
  icon: undefined
};
BenefitItem.displayName = 'BenefitWithHeading.Item';

var cloneChild = function cloneChild(icon, child) {
  if (child.props.icon) {
    return child;
  }

  return React.cloneElement(child, {
    icon: icon
  });
};
/**
 * @version ../package.json
 */


var BenefitWithHeading = function BenefitWithHeading(_ref) {
  var icon = _ref.icon,
      children = _ref.children,
      rest = objectWithoutProperties(_ref, ["icon", "children"]);

  return React.createElement(Box, _extends_1({}, utilHelpers.safeRest(rest), {
    tag: "ul",
    between: 3
  }), React.Children.map(children, function (child) {
    return cloneChild(icon, child);
  }));
};

BenefitWithHeading.propTypes = {
  /**
   * A `DecorativeIcon`. If set here, it applies to all nested Benefit Items
   * except for Items that receive an `icon` prop.
   */
  icon: utilPropTypes.componentWithName('DecorativeIcon', true),

  /**
   * An Item in the Benefit list.
   */
  children: utilPropTypes.componentWithName('BenefitItem').isRequired
};
BenefitWithHeading.defaultProps = {
  icon: undefined
};
BenefitWithHeading.Item = BenefitItem;

/**
 * @version ../package.json
 */

var BenefitItem$1 = function BenefitItem(_ref) {
  var Icon = _ref.icon,
      children = _ref.children,
      rest = objectWithoutProperties(_ref, ["icon", "children"]);

  if (Icon === undefined || typeof Icon === 'undefined') {
    warn('BenefitNoHeading', 'An icon must be set in either BenefitNoHeading or BenefitNoHeading.Item.');
  }

  return React.createElement(Box, _extends_1({}, utilHelpers.safeRest(rest), {
    between: 3,
    inline: true,
    tag: "li"
  }), Icon && React.createElement(Icon, {
    size: 24,
    variant: "default"
  }), React.createElement(Text, {
    size: "small"
  }, children));
};

BenefitItem$1.propTypes = {
  /**
   * A DecorativeIcon. This will override any `icon` prop set in the parent.
   */
  icon: utilPropTypes.componentWithName('DecorativeIcon', true),

  /**
   * An item in the Benefit list
   */
  children: PropTypes.node.isRequired
};
BenefitItem$1.defaultProps = {
  icon: undefined
};
BenefitItem$1.displayName = 'BenefitNoHeading.Item';

var cloneChild$1 = function cloneChild(icon, child) {
  if (child.props.icon) {
    return child;
  }

  return React.cloneElement(child, {
    icon: icon
  });
};
/**
 * @version ../package.json
 */


var BenefitNoHeading = function BenefitNoHeading(_ref) {
  var icon = _ref.icon,
      children = _ref.children,
      rest = objectWithoutProperties(_ref, ["icon", "children"]);

  return React.createElement(Box, _extends_1({}, utilHelpers.safeRest(rest), {
    tag: "ul",
    between: 3
  }), React.Children.map(children, function (child) {
    return cloneChild$1(icon, child);
  }));
};

BenefitNoHeading.propTypes = {
  /**
   * A `DecorativeIcon`. If set here, it applies to all nested Benefit Items
   * except for Items that receive an `icon` prop.
   */
  icon: utilPropTypes.componentWithName('DecorativeIcon', true),

  /**
   * An Item in the Benefit list
   */
  children: utilPropTypes.componentWithName('BenefitItem').isRequired
};
BenefitNoHeading.defaultProps = {
  icon: undefined
};
BenefitNoHeading.Item = BenefitItem$1;

exports.BenefitNoHeading = BenefitNoHeading;
exports.BenefitWithHeading = BenefitWithHeading;
