'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var styled = _interopDefault(require('styled-components'));
var Heading = _interopDefault(require('@tds/core-heading'));
var Box = _interopDefault(require('@tds/core-box'));
var coreColours = require('@tds/core-colours');
var sharedStyles = require('@tds/shared-styles');
var utilHelpers = require('@tds/util-helpers');

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function find(t,n,r){if("function"==typeof Array.prototype.find)return t.find(n,r);r=r||this;var f=t.length;if("function"!=typeof n)throw new TypeError(n+" is not a function");for(var o=0;o<f;o++)if(n.call(r,t[o],o,t))return t[o]}

var sanitize = function sanitize(text) {
  return text.toString().toLowerCase().replace(/ /g, '-').replace(/[^a-zA-Z0-9-]/g, '');
};

var generateId = function generateId() {
  for (var _len = arguments.length, choices = new Array(_len), _key = 0; _key < _len; _key++) {
    choices[_key] = arguments[_key];
  }

  var id = sanitize(find(choices, function (choice) {
    return choice;
  }));
  return {
    identity: function identity() {
      return id;
    },
    postfix: function postfix(value) {
      return "".concat(id, "_").concat(sanitize(value));
    }
  };
};

var _styled$label;

var getVariant = function getVariant(_ref) {
  var variant = _ref.variant;
  var colour = variant === 'standard' ? coreColours.colorAccessibleGreen : coreColours.colorTelusPurple;
  var backgroundColour = variant === 'standard' ? coreColours.colorPanache : coreColours.colorWhiteLilac;
  return {
    '&:hover': {
      border: "0.0625rem solid ".concat(colour, " !important"),
      boxShadow: "0 0 0 0.0625rem ".concat(colour, "  !important")
    },
    '&:active': {
      border: "0.0625rem solid ".concat(colour),
      boxShadow: "0 0 0 0.0625rem ".concat(colour, ",0 0 0 0.125rem #FFFFFF inset, 0 0 0 0.1875rem ").concat(colour, " inset !important"),
      background: backgroundColour
    }
  };
};

var getStates = function getStates(_ref2) {
  var variant = _ref2.variant;
  var colour = variant === 'standard' ? coreColours.colorAccessibleGreen : coreColours.colorTelusPurple;
  return {
    '&:focus ~ label': {
      boxShadow: "0 0 0 0.0625rem ".concat(colour, ",0 0 0 0.125rem #FFFFFF inset, 0 0 0 0.1875rem ").concat(colour, " inset !important"),
      border: "0.0625rem solid ".concat(colour, " !important")
    },
    '&:checked ~ label': {
      border: "0.0625rem solid ".concat(colour),
      boxShadow: "0 0 0 0.0625rem ".concat(colour)
    }
  };
};

var FakeRadio = styled.span(_extends_1({
  height: '1.25rem',
  width: '1.25rem',
  minHeight: '1.25rem',
  minWidth: '1.25rem',
  outline: 0,
  lineHeight: 0,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  cursor: 'pointer',
  marginTop: '0.3rem',
  transition: 'border-color 0.1s linear, background-color 0.1s linear',
  borderRadius: '50%'
}, sharedStyles.borders.thin, {
  borderColor: coreColours.colorGreyShuttle,
  backgroundColor: coreColours.colorWhite,
  '& > i': {
    display: 'none'
  }
}));
var HiddenInput = styled.input(getStates, {
  position: 'absolute',
  width: '1.2rem',
  height: '1.2rem',
  margin: '2px 1px',
  opacity: '0',
  pointerEvents: 'none',
  '&:focus ~ label': {
    outline: 'none !important'
  }
});
var StyledLabel = styled.label(getVariant, sharedStyles.borders.none, sharedStyles.borders.rounded, (_styled$label = {
  display: 'flex',
  cursor: 'pointer',
  height: '100%',
  border: "0.0625rem solid ".concat(coreColours.colorGreyGainsboro),
  boxShadow: '0 0 1rem 0 rgba(0, 0, 0, 0.1)',
  backgroundColor: coreColours.colorWhite,
  transition: 'transform 0.2s ease-in-out, background 0.2s, color 0.2s, border 0.2s ease',
  '&:hover': {
    transform: 'scale(1.025)'
  },
  '@media (prefers-reduced-motion: reduce)': {
    transition: 'none !important',
    transform: 'none !important'
  }
}, defineProperty(_styled$label, "".concat(HiddenInput, ":focus ~ & > div > div > ").concat(FakeRadio), {
  boxShadow: "0 0 4px 1px ".concat(coreColours.colorGreyShuttle),
  borderColor: coreColours.colorWhite
}), defineProperty(_styled$label, "".concat(HiddenInput, ":checked ~ & > div > div > ").concat(FakeRadio), {
  '& > span': {
    display: 'block'
  },
  borderColor: coreColours.colorGreyShuttle
}), _styled$label));
var InnerChecked = styled.span({
  width: '0.75rem',
  height: '0.75rem',
  borderRadius: '50%',
  backgroundColor: coreColours.colorAccessibleGreen,
  display: 'none'
});
var labelBox = {
  width: '100%',
  marginRight: '0.5rem',
  '@media (min-width: 768px)': {
    marginRight: '1rem'
  }
};

var getGeneratedId = function getGeneratedId(name, value) {
  return generateId(name).postfix(value);
};

var StyledLabelBox = styled(Box)(labelBox);
var StyledChildrenBox = styled(Box)({
  marginLeft: '2.25rem'
});
var StyledDiv = styled.div(function (_ref3) {
  var fullHeight = _ref3.fullHeight;

  if (fullHeight) {
    return {
      height: '100%'
    };
  }

  return {};
});
/**
 * @version ./package.json
 * @visibleName RadioCard (beta)
 */

var RadioCard = React.forwardRef(function (_ref4, ref) {
  var id = _ref4.id,
      name = _ref4.name,
      value = _ref4.value,
      label = _ref4.label,
      fullHeight = _ref4.fullHeight,
      variant = _ref4.variant,
      children = _ref4.children,
      rest = objectWithoutProperties(_ref4, ["id", "name", "value", "label", "fullHeight", "variant", "children"]);

  return React.createElement(StyledDiv, {
    fullHeight: fullHeight
  }, React.createElement(HiddenInput, _extends_1({
    type: "radio",
    id: id || getGeneratedId(name, value),
    name: name,
    value: value,
    "data-testid": "hidden-input",
    variant: variant,
    ref: ref
  }, utilHelpers.safeRest(rest))), React.createElement(StyledLabel, {
    htmlFor: id || getGeneratedId(name, value),
    variant: variant,
    "data-testid": "checkbox-label"
  }, React.createElement(StyledLabelBox, {
    vertical: 4,
    horizontal: 3
  }, React.createElement(Box, {
    between: 3,
    inline: true
  }, React.createElement(FakeRadio, {
    "data-testid": "fake-input"
  }, React.createElement(InnerChecked, null)), React.createElement(Heading, {
    level: "h3"
  }, label)), children && React.createElement(StyledChildrenBox, null, children))));
});
RadioCard.propTypes = {
  /**
   * The style.
   */
  variant: PropTypes.oneOf(['standard', 'brand']),

  /**
   * The label.
   */
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,

  /**
   * Associate this radio card with a group. Set as the HTML name attribute.
   */
  name: PropTypes.string.isRequired,

  /**
   * The value. Must be unique within the group.
   */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]).isRequired,

  /**
   * Use `checked` for controlled radio.
   */
  checked: PropTypes.bool,

  /**
   * The id. Must be unique within the group. If no id is provided, one will be generated in the following format: `name_value`
   */
  id: PropTypes.string,

  /**
   * Sets the radio card `height` equal to its parent.
   */
  fullHeight: PropTypes.bool,

  /**
   * Additional details regarding the selection to present on the radio card.
   */
  children: PropTypes.node
};
RadioCard.defaultProps = {
  checked: undefined,
  variant: 'standard',
  id: undefined,
  children: null,
  fullHeight: false
};
RadioCard.displayName = 'RadioCard';

exports.default = RadioCard;
