'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var DecorativeIcon = _interopDefault(require('@tds/core-decorative-icon'));
var coreInteractiveIcon = require('@tds/core-interactive-icon');
var A11yContent = _interopDefault(require('@tds/core-a11y-content'));
var Box = _interopDefault(require('@tds/core-box'));
var Text = _interopDefault(require('@tds/core-text'));
var Strong = _interopDefault(require('@tds/core-strong'));
var utilHelpers = require('@tds/util-helpers');
var styled = _interopDefault(require('styled-components'));

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

var arrayWithHoles = _arrayWithHoles;

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

var iterableToArrayLimit = _iterableToArrayLimit;

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var nonIterableRest = _nonIterableRest;

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
}

var slicedToArray = _slicedToArray;

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

var LabelStyle = styled.label(function () {
  return {
    span: {
      fontSize: '14px',
      color: '#2A2C2E',
      display: 'block'
    }
  };
});
var InputGroupStyle = styled.div(function (_ref) {
  var hasValue = _ref.hasValue;
  return {
    display: 'inline-flex',
    flexWrap: 'nowrap',
    height: '52px',
    width: '100%',
    maxWidth: '768px',
    minWidth: '200px',
    borderRadius: '5px',
    '&:hover': {
      boxShadow: '0 0 0 1px #4B286D',
      input: {
        borderColor: '#4B286D'
      }
    },
    input: {
      marginLeft: 0,
      height: '100%',
      borderLeft: '1px solid #D8D8D8',
      borderTop: '1px solid #D8D8D8',
      borderBottom: '1px solid #D8D8D8',
      borderRight: 'none',
      borderRadius: '4px 0 0 4px',
      color: '#2A2C2E',
      flexGrow: 1,
      marginRight: hasValue ? '-52px' : '0',
      textIndent: '15px',
      '&::-ms-clear': {
        display: 'none'
      },
      '&::placeholder': {
        color: '#71757B'
      },
      '&:active': {
        borderColor: '#4B286D'
      },
      '&:focus': {
        borderColor: '#4B286D'
      }
    },
    button: {
      height: '100%',
      width: '52px',
      cursor: 'pointer',
      '&:last-child': {
        backgroundColor: '#462C6A',
        borderLeft: 'none',
        borderTop: '1px solid #462C6A',
        borderRight: '1px solid #462C6A',
        borderBottom: '1px solid #462C6A',
        borderRadius: '0 4px 4px 0',
        i: {
          color: '#FFFFFF'
        }
      }
    },
    'input:focus, button:last-child:focus': {
      outlineWidth: '4px',
      outlineStyle: 'solid',
      outlineColor: 'rgba(75, 40, 109, 0.5)',
      outlineOffset: '1px',
      '-moz-outline-radius': '8px'
    }
  };
});

/**
 * @version ./package.json
 */

var InputGroup = function InputGroup(_ref) {
  var id = _ref.id,
      closeA11yText = _ref.closeA11yText,
      defaultValue = _ref.defaultValue,
      buttonText = _ref.buttonText,
      label = _ref.label,
      hint = _ref.hint,
      _onChange = _ref.onChange,
      onButtonClick = _ref.onButtonClick,
      onClearButtonClick = _ref.onClearButtonClick,
      rest = objectWithoutProperties(_ref, ["id", "closeA11yText", "defaultValue", "buttonText", "label", "hint", "onChange", "onButtonClick", "onClearButtonClick"]);

  var inputRef = React.createRef();

  var _useState = React.useState(''),
      _useState2 = slicedToArray(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var inputId = React.useMemo(function () {
    return id || label && utilHelpers.uniqueId(label) || undefined;
  }, [label, id]);
  React.useEffect(function () {
    if (defaultValue) {
      setInputValue(defaultValue);
    }
  }, [defaultValue]);
  return React__default.createElement(Box, {
    between: 1
  }, label && React__default.createElement(LabelStyle, {
    htmlFor: inputId
  }, React__default.createElement(Text, null, React__default.createElement(Strong, null, label)), React__default.createElement(Text, null, hint)), React__default.createElement(InputGroupStyle, {
    hasValue: !!inputValue
  }, React__default.createElement("input", _extends_1({}, utilHelpers.safeRest(rest), {
    id: inputId,
    value: inputValue,
    onChange: function onChange(e) {
      setInputValue(e.target.value);
      if (_onChange) _onChange(e);
    },
    ref: inputRef
  })), !!inputValue && React__default.createElement(coreInteractiveIcon.IconButton, {
    icon: coreInteractiveIcon.Close,
    a11yText: closeA11yText,
    onClick: function onClick(e) {
      setInputValue('');
      inputRef.current.focus();
      if (onClearButtonClick) onClearButtonClick(e);
    }
  }), React__default.createElement("button", {
    type: "button",
    onClick: onButtonClick
  }, React__default.createElement(A11yContent, null, buttonText), React__default.createElement(DecorativeIcon, {
    symbol: "spyglass",
    variant: "secondary"
  }))));
};

InputGroup.propTypes = {
  /**
   * The unique identifier
   */
  id: PropTypes.string,

  /**
   * The close a11y test
   */
  closeA11yText: PropTypes.string,

  /**
   * The textbox default value
   */
  defaultValue: PropTypes.string,

  /**
   * The button text for accessibility
   */
  buttonText: PropTypes.string,

  /**
   * The label displayed above the textbox
   */
  label: PropTypes.string,

  /**
   * The hint displayed below the label
   */
  hint: PropTypes.string,

  /**
   * The event triggered every time when making changes to the textbox
   */
  onChange: PropTypes.func,

  /**
   * The event triggered every time a user click the button
   */
  onButtonClick: PropTypes.func,

  /**
   * The event triggered every time a user click the clear/cross button
   */
  onClearButtonClick: PropTypes.func
};
InputGroup.defaultProps = {
  id: '',
  closeA11yText: 'Close',
  defaultValue: '',
  buttonText: '',
  label: '',
  hint: '',
  onChange: undefined,
  onButtonClick: undefined,
  onClearButtonClick: undefined
};

exports.default = InputGroup;
