'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var styled = _interopDefault(require('styled-components'));
var utilHelpers = require('@tds/util-helpers');
var coreColours = require('@tds/core-colours');
var Box = _interopDefault(require('@tds/core-box'));
var Text = _interopDefault(require('@tds/core-text'));
var DecorativeIcon = _interopDefault(require('@tds/core-decorative-icon'));
var sharedAnimation = require('@tds/shared-animation');
var utilPropTypes = require('@tds/util-prop-types');
var sharedTypography = require('@tds/shared-typography');

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var arrayWithoutHoles = _arrayWithoutHoles;

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

var iterableToArray = _iterableToArray;

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var nonIterableSpread = _nonIterableSpread;

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

var toConsumableArray = _toConsumableArray;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck = _classCallCheck;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var assertThisInitialized = _assertThisInitialized;

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

var possibleConstructorReturn = _possibleConstructorReturn;

var getPrototypeOf = createCommonjsModule(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
});

var setPrototypeOf = createCommonjsModule(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
});

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

var inherits = _inherits;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

var ColoredTextProvider =
/*#__PURE__*/
function (_React$Component) {
  inherits(ColoredTextProvider, _React$Component);

  function ColoredTextProvider() {
    classCallCheck(this, ColoredTextProvider);

    return possibleConstructorReturn(this, getPrototypeOf(ColoredTextProvider).apply(this, arguments));
  }

  createClass(ColoredTextProvider, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        inheritColor: true
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          children = _this$props.children;

      if (className === null) {
        return React__default.createElement("div", null, children);
      }

      return React__default.createElement("div", {
        className: className
      }, children);
    }
  }]);

  return ColoredTextProvider;
}(React__default.Component);

ColoredTextProvider.propTypes = {
  className: PropTypes.string,
  children: PropTypes.node.isRequired
};
ColoredTextProvider.defaultProps = {
  className: null
};
ColoredTextProvider.childContextTypes = {
  inheritColor: PropTypes.bool
};

var warn = function warn(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};

var activeContainer = {
  borderLeft: "4px solid ".concat(coreColours.colorTelusPurple),
  color: "".concat(coreColours.colorTelusPurple),
  backgroundColor: "".concat(coreColours.colorWhiteLilac)
};
var activeText = {
  fontWeight: 'bold',
  color: "".concat(coreColours.colorTelusPurple)
};
var hover = {
  color: "".concat(coreColours.colorShuttleGrey),
  '&:hover': {
    color: "".concat(coreColours.colorTelusPurple)
  }
};
var BoxContainer = styled(Box)(function (props) {
  return _extends_1({
    '&:hover': {
      backgroundColor: "".concat(coreColours.colorWhiteLilac)
    },
    marginLeft: props.submenulink ? '1rem' : '0',
    borderLeft: props.submenulink ? "4px solid ".concat(coreColours.colorWhiteLilac) : 'none'
  }, props.active && !props.submenulink ? activeContainer : undefined);
});
var BoxWrapper = styled(Box)(function (props) {
  return {
    backgroundColor: props.active ? "".concat(coreColours.colorWhiteLilac) : 'none'
  };
});
var BoxActive = styled(Box)(function (props) {
  return {
    borderLeft: props.active && props.submenulink ? "4px solid ".concat(coreColours.colorTelusPurple) : 'none',
    marginLeft: props.submenulink ? '-0.25rem' : '0px'
  };
});
var StyledTextProvider = styled(ColoredTextProvider)(function (props) {
  return _extends_1({}, props.active ? activeText : hover);
});
var StyledAnchor = styled.a({
  textDecoration: 'none'
});
/**
 * _This component can only be accessed as a name-spaced component: `SideNavigation.Link`._
 */

var Link = function Link(_ref) {
  var reactRouterLinkComponent = _ref.reactRouterLinkComponent,
      children = _ref.children,
      active = _ref.active,
      subMenuLink = _ref.subMenuLink,
      rest = objectWithoutProperties(_ref, ["reactRouterLinkComponent", "children", "active", "subMenuLink"]);

  if ((reactRouterLinkComponent || rest.to) && !(reactRouterLinkComponent && rest.to)) {
    warn('Link', 'The props `reactRouterLinkComponent` and `to` must be used together.');
  }

  var innerLink = React__default.createElement(BoxWrapper, {
    active: active ? 1 : 0
  }, React__default.createElement(BoxContainer, {
    vertical: 3,
    submenulink: subMenuLink ? 1 : 0,
    active: active ? 1 : 0
  }, React__default.createElement(BoxActive, {
    active: active ? 1 : 0,
    horizontal: 3,
    submenulink: subMenuLink ? 1 : 0
  }, React__default.createElement(StyledTextProvider, {
    active: active
  }, React__default.createElement(Text, {
    size: subMenuLink ? 'small' : 'medium',
    bold: active
  }, children)))));
  return React__default.createElement(reactRouterLinkComponent || StyledAnchor, _extends_1({}, utilHelpers.safeRest(rest)), innerLink);
};

Link.propTypes = {
  /**
   * Text of the Link.
   */
  children: PropTypes.string.isRequired,

  /**
   * Target URL.
   */
  href: PropTypes.string,

  /**
   * Active state for the link (if you are on the current URL of the link).
   */
  active: PropTypes.bool,

  /**
   * Describes whether the link is used as a SubMenu header or not.
   *
   * @ignore
   */
  subMenuLink: PropTypes.bool,

  /**
   * 	React Router Link component.
   */
  reactRouterLinkComponent: PropTypes.func,

  /**
   * Target URL (if using 'reactRouterLinkComponent').
   */
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object])
};
Link.defaultProps = {
  href: undefined,
  active: false,
  subMenuLink: false,
  reactRouterLinkComponent: null,
  to: null
};

var SubMenuContainer = styled.ul({
  marginBottom: '1rem'
});
var ButtonSubMenu = styled.button(function (props) {
  return {
    backgroundColor: 'white',
    border: 'none',
    width: '100%',
    color: props.active && !props.isOpen ? "".concat(coreColours.colorTelusPurple) : "".concat(coreColours.colorShuttleGrey),
    borderLeft: props.active && !props.isOpen ? "4px solid ".concat(coreColours.colorTelusPurple) : 'none',
    fontFamily: "".concat(sharedTypography.fontTelus),
    '&:hover': {
      backgroundColor: "".concat(coreColours.colorWhiteLilac),
      color: "".concat(coreColours.colorTelusPurple),
      cursor: 'pointer'
    }
  };
});
var SpaceBox = styled(Box)({
  justifyContent: 'space-between',
  alignItems: 'center',
  textAlign: 'left',
  display: 'flex'
});
/**
 * Expandable content areas for use with the `SideNavigation`
 *
 * _This component can only be accessed as a name-spaced component: `SideNavigation.SubMenu`._
 */

var SubMenu =
/*#__PURE__*/
function (_React$Component) {
  inherits(SubMenu, _React$Component);

  function SubMenu(props) {
    var _this;

    classCallCheck(this, SubMenu);

    _this = possibleConstructorReturn(this, getPrototypeOf(SubMenu).call(this, props));

    defineProperty(assertThisInitialized(_this), "handleClick", function () {
      if (_this.props.onClick) {
        _this.props.onClick();
      }

      _this.props.handleToggleSubMenu(_this.props.id);
    });

    defineProperty(assertThisInitialized(_this), "adjustHeight", function () {
      if (_this.subMenu.offsetHeight !== _this.state.subMenuHeight) {
        _this.setState({
          subMenuHeight: _this.subMenu.offsetHeight
        });
      }
    });

    defineProperty(assertThisInitialized(_this), "checkActiveChildren", function () {
      React__default.Children.map(_this.props.children, function (child) {
        if (child.props.active) {
          _this.setState({
            active: true
          });

          _this.props.handleToggleSubMenu(_this.props.id);
        }
      });
    });

    defineProperty(assertThisInitialized(_this), "options", {
      subMenuLink: true
    });

    _this.state = {
      subMenuHeight: 0,
      active: undefined
    };
    _this.subMenu = null;
    return _this;
  }

  createClass(SubMenu, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.checkActiveChildren();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.adjustHeight();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          label = _this$props.label,
          isOpen = _this$props.isOpen,
          onOpen = _this$props.onOpen,
          onExit = _this$props.onExit,
          rest = objectWithoutProperties(_this$props, ["children", "label", "isOpen", "onOpen", "onExit"]);

      var activeChild = this.state.active;
      return React__default.createElement(React__default.Fragment, null, React__default.createElement(ButtonSubMenu, _extends_1({}, utilHelpers.safeRest(rest), {
        onClick: this.handleClick,
        active: activeChild,
        "aria-expanded": isOpen,
        isOpen: isOpen
      }), React__default.createElement(SpaceBox, {
        vertical: 3,
        inline: true,
        horizontal: 2
      }, React__default.createElement(ColoredTextProvider, null, React__default.createElement(Text, {
        size: "medium",
        bold: activeChild
      }, label)), React__default.createElement(DecorativeIcon, {
        symbol: isOpen ? 'caretUp' : 'caretDown',
        variant: "secondary",
        size: 16
      }))), React__default.createElement(sharedAnimation.FadeAndReveal, {
        timeout: isOpen ? 500 : 0,
        duration: 500,
        in: isOpen,
        height: this.state.subMenuHeight,
        onEntered: onOpen,
        onExited: onExit
      }, function () {
        return React__default.createElement(SubMenuContainer, {
          ref: function ref(c) {
            _this2.subMenu = c;
          }
        }, React__default.Children.map(children, function (child) {
          return React__default.createElement("li", null, React__default.cloneElement(child, _this2.options));
        }));
      }));
    }
  }]);

  return SubMenu;
}(React__default.Component);

SubMenu.propTypes = {
  /**
   * An array of `SideNavigation.Link`.
   */
  children: utilPropTypes.componentWithName('Link'),

  /**
   * Label of the SubMenu.
   */
  label: PropTypes.string.isRequired,

  /**
   * Behaviour when clicking the SubMenu. Passed from <SideNavigation> to toggle open or close the SubMenu.
   *
   * @ignore
   */
  handleToggleSubMenu: PropTypes.func,

  /**
   * ID of the SubMenu, must be unique when using multiple SubMenus within the same SideNavigation component.
   * @ignore
   */
  id: PropTypes.string,

  /**
   * Describes whether this SubMenu is open or not. Used in conjunction with ID so that only one SubMenu is open at a time.
   *
   * @ignore
   */
  isOpen: PropTypes.bool,

  /**
   * Click handler.
   *
   * @ignore
   */
  onClick: PropTypes.func,

  /**
   * Callback.
   *
   * @ignore
   */
  onOpen: PropTypes.func,

  /**
   * Callback.
   *
   * @ignore
   */
  onExit: PropTypes.func
};
SubMenu.defaultProps = {
  handleToggleSubMenu: undefined,
  isOpen: false,
  children: undefined,
  id: undefined,
  onClick: undefined,
  onOpen: undefined,
  onExit: undefined
};

var DivContainer = styled.div({
  position: 'relative',
  height: '100%'
});
var topPosition = {
  position: 'relative',
  maxWidth: 'inherit',
  width: '100%',
  overflowY: 'auto'
};
var fixedPosition = {
  position: 'fixed',
  maxWidth: 'inherit',
  top: '0px',
  width: 'inherit',
  clear: 'both'
};
var bottomPosition = {
  position: 'absolute',
  bottom: '0px'
};
var fixedOverflow = {
  overflowY: 'auto',
  bottom: '0px'
};
var NavContainer = styled.div(function (props) {
  return _extends_1({}, props.variant === 'top' && topPosition, {}, props.variant === 'bottom' && bottomPosition, {}, props.variant === 'fixed' && fixedPosition, {}, props.variant === 'fixedOverflow' && _extends_1({}, fixedPosition, {}, fixedOverflow));
});
var StyledUl = styled.ul({
  listStyle: 'none',
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'space-around',
  margin: '0',
  borderTop: "1px solid ".concat(coreColours.colorGainsboro)
});
var StyledLi = styled.li({
  borderBottom: "1px solid ".concat(coreColours.colorGainsboro),
  alignItems: 'center',
  lineHeight: '0'
});
/**
 * The SideNavigation component is used in conjuntion with a large amount of educational / informational content,
 * allowing the user to navigate between options frequently and efficiently.
 * @version ./package.json
 */

var SideNavigation =
/*#__PURE__*/
function (_Component) {
  inherits(SideNavigation, _Component);

  function SideNavigation(props) {
    var _this;

    classCallCheck(this, SideNavigation);

    _this = possibleConstructorReturn(this, getPrototypeOf(SideNavigation).call(this, props));

    defineProperty(assertThisInitialized(_this), "onExited", function () {
      var sideNavRect = _this._sideNav.current;

      if (_this.checkOverflow(sideNavRect) && _this.state.variant === 'fixedOverflow') {
        _this.setState({
          variant: 'fixed'
        });
      }
    });

    defineProperty(assertThisInitialized(_this), "toggleSubMenu", function (id) {
      if (_this.checkAccordion(id, _this.state.accordion)) {
        var array = toConsumableArray(_this.state.open);

        var index = array.indexOf(id);

        if (index !== -1) {
          array.splice(index, 1);

          _this.setState({
            open: array
          });
        }
      } else if (_this.state.accordion) {
        _this.setState({
          open: [id]
        });
      } else {
        _this.setState({
          open: [].concat(toConsumableArray(_this.state.open), [id])
        });
      }
    });

    defineProperty(assertThisInitialized(_this), "checkOffset", function () {
      var sideNavRect = _this._sideNav.current.getBoundingClientRect();

      var containerRect = _this._sideNavContainer.getBoundingClientRect();

      if (sideNavRect.top >= 0 && containerRect.top >= 0 || sideNavRect.height >= containerRect.height) {
        _this.setState({
          variant: 'top'
        });
      } else if (_this.checkOverflow(_this._sideNav.current) && sideNavRect.bottom <= containerRect.bottom && sideNavRect.bottom >= 0 && _this.state.variant !== 'bottom' && sideNavRect.height < containerRect.height) {
        _this.setState({
          variant: 'fixedOverflow'
        });
      } else if ((sideNavRect.top < 0 && containerRect.top < 0 && sideNavRect.bottom <= containerRect.bottom && sideNavRect.bottom > 0 && _this.state.variant !== 'bottom' || sideNavRect.top > 0 && containerRect.top <= 0) && sideNavRect.height < containerRect.height) {
        _this.setState({
          variant: 'fixed'
        });
      } else if ((sideNavRect.bottom > containerRect.bottom || sideNavRect.bottom <= 0) && sideNavRect.height <= containerRect.height && _this.state.variant !== 'top' || sideNavRect.top < 0 && containerRect.top < 0 && sideNavRect.bottom <= containerRect.bottom && sideNavRect.bottom < 0 && _this.state.variant !== 'bottom') {
        _this.setState({
          variant: 'bottom'
        });
      }
    });

    defineProperty(assertThisInitialized(_this), "checkAccordion", function (id) {
      return _this.state.open.some(function (el) {
        return el === id;
      });
    });

    defineProperty(assertThisInitialized(_this), "checkOverflow", function (element) {
      return element.scrollHeight >= window.innerHeight;
    });

    defineProperty(assertThisInitialized(_this), "checkActiveState", function () {
      React__default.Children.map(_this.props.children, function (child, index) {
        var id = "TDS-SideNavigation-".concat(index);

        if (!('href' in child.props) && child.props.active) {
          _this.toggleSubMenu(id);
        }
      });
    });

    _this.state = {
      open: [],
      variant: 'top',
      accordion: _this.props.accordion
    };
    _this.adjustWidth = _this.adjustWidth.bind(assertThisInitialized(_this));
    _this.removeEventListeners = _this.removeEventListeners.bind(assertThisInitialized(_this));
    _this._sideNav = React__default.createRef();
    return _this;
  }

  createClass(SideNavigation, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('scroll', this.checkOffset);
      window.addEventListener('resize', this.adjustWidth);
      this.checkOffset();
      this.adjustWidth();
      this.checkActiveState();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeEventListeners();
    }
  }, {
    key: "adjustWidth",
    value: function adjustWidth() {
      var parentWidth = this._sideNavContainer.offsetWidth;
      var sideNav = this._sideNav.current;
      sideNav.style.width = "".concat(parentWidth, "px");
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      window.removeEventListener('scroll', this.checkOffset);
      window.removeEventListener('resize', this.adjustWidth);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          verticalSpacing = _this$props.verticalSpacing,
          accordion = _this$props.accordion,
          category = _this$props.category,
          rest = objectWithoutProperties(_this$props, ["children", "verticalSpacing", "accordion", "category"]);

      var variant = this.state.variant;
      return React__default.createElement(DivContainer, _extends_1({}, utilHelpers.safeRest(rest), {
        ref: function ref(c) {
          _this2._sideNavContainer = c;
        }
      }), React__default.createElement(NavContainer, {
        ref: this._sideNav,
        variant: variant
      }, React__default.createElement(Box, {
        vertical: variant === 'bottom' || variant === 'fixed' || variant === 'fixedOverflow' ? undefined : verticalSpacing
      }, category && React__default.createElement(Box, {
        vertical: 3,
        horizontal: 3
      }, React__default.createElement(Text, {
        size: "large",
        bold: true
      }, category)), React__default.createElement(StyledUl, null, React__default.Children.map(children, function (child, index) {
        var options = {};
        var id = "TDS-SideNavigation-".concat(index); // check if href is in props to figure out if child is SubMenu or Link

        if (!('href' in child.props)) {
          options = {
            handleToggleSubMenu: _this2.toggleSubMenu,
            isOpen: _this2.checkAccordion(id),
            id: id,
            onOpen: _this2.checkOffset,
            onExit: _this2.onExited
          };
        }

        return React__default.createElement(StyledLi, null, React__default.cloneElement(child, options));
      })))));
    }
  }]);

  return SideNavigation;
}(React.Component);

SideNavigation.propTypes = {
  /**
   * Specifies the label at the top of the Side Navigation.
   */
  category: PropTypes.string,

  /**
   * Specifies the links and sub-menus required in the Side Navigation.
   */
  children: PropTypes.node.isRequired,

  /**
   * Indent content from the container's top edge by applying padding.
   */
  verticalSpacing: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 7, 8]),

  /**
   * Identifies if only one `SideNavigation.SubMenu` should be open at a time.
   */
  accordion: PropTypes.bool
};
SideNavigation.defaultProps = {
  verticalSpacing: undefined,
  accordion: true,
  category: undefined
};
SideNavigation.Link = Link;
SideNavigation.SubMenu = SubMenu;

exports.default = SideNavigation;
