import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { colorGreyShuttle, colorPrimary, colorWhite } from '@tds/core-colours';
import Text from '@tds/core-text';
import FlexGrid from '@tds/core-flex-grid';
import { safeRest, getCopy } from '@tds/util-helpers';
import Icon from '@tds/core-decorative-icon';
import { media } from '@tds/core-responsive';

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

/* eslint-disable import/prefer-default-export */
var deprecate = function deprecate(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] [Deprecate] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};

var stepTrackerText = {
  en: {
    mobileStepLabel: 'Step %{current} of %{total}:'
  },
  fr: {
    mobileStepLabel: 'Ã‰tape %{current} sur %{total}:'
  }
};

var StyledStep = styled.div.withConfig({
  displayName: "Step__StyledStep",
  componentId: "sc-82lj6d-0"
})({
  position: 'relative',
  textAlign: 'center',
  width: '100%',
  '&:before, &:after': {
    position: 'absolute',
    top: '17px',
    width: 'calc(50% - 1.07rem)',
    content: "''",
    borderBottom: "0.1rem solid ".concat(colorGreyShuttle)
  },
  '&:before': {
    left: 0
  },
  '&:after': {
    right: 0
  },
  '&:first-child': {
    '&:before': {
      content: 'none'
    }
  },
  '&:last-child': {
    '&:after': {
      content: 'none'
    }
  }
});
var StyledIcon = styled.span.withConfig({
  displayName: "Step__StyledIcon",
  componentId: "sc-82lj6d-1"
})(function (_ref) {
  var isStepActive = _ref.isStepActive;
  return _extends_1({
    display: 'inline-block',
    border: "0.1rem solid ".concat(colorGreyShuttle),
    borderRadius: '50%',
    lineHeight: '1.7rem',
    width: '35px',
    height: '35px',
    marginBottom: '1rem'
  }, isStepActive && {
    backgroundColor: colorPrimary,
    textAlign: 'center',
    border: "0.1rem solid ".concat(colorPrimary)
  });
});
var StyledLabel = styled.div.withConfig({
  displayName: "Step__StyledLabel",
  componentId: "sc-82lj6d-2"
})(_extends_1({
  display: 'none',
  textAlign: 'center'
}, media.from('md').css({
  display: 'block'
})));
/**
 * A single step of a StepTracker.
 */

var Step = function Step(_ref2) {
  var label = _ref2.label,
      status = _ref2.status,
      stepNumber = _ref2.stepNumber,
      stepIndex = _ref2.stepIndex;

  var isStepActive = function isStepActive() {
    return status > stepIndex || status === stepIndex;
  };

  return React.createElement(StyledStep, {
    "aria-label": label,
    "aria-current": status === stepIndex ? 'true' : 'false',
    "data-testid": "singleStepContainer-".concat(stepIndex),
    "data-isactive": isStepActive()
  }, React.createElement(StyledIcon, {
    isStepActive: isStepActive()
  }, status > stepIndex ? React.createElement(Icon, {
    symbol: "checkmark",
    size: 16,
    variant: "inverted"
  }) : React.createElement("br", null)), React.createElement(StyledLabel, null, React.createElement(Text, {
    bold: status === stepIndex
  }, stepNumber, ". ", label)));
};

Step.propTypes = {
  label: PropTypes.string.isRequired,
  status: PropTypes.number.isRequired,
  stepNumber: PropTypes.number.isRequired,
  stepIndex: PropTypes.number.isRequired
};

var StyledStepBg = styled.div.withConfig({
  displayName: "StepTracker__StyledStepBg",
  componentId: "umz84-0"
})({
  padding: '1rem 0',
  backgroundColor: colorWhite
});
var StyledStepContainer = styled.div.withConfig({
  displayName: "StepTracker__StyledStepContainer",
  componentId: "umz84-1"
})({
  display: 'flex',
  flexDirection: 'row'
});
var StyledMobileLabel = styled.div.withConfig({
  displayName: "StepTracker__StyledMobileLabel",
  componentId: "umz84-2"
})({
  width: '100%',
  textAlign: 'center'
});

var parseStepText = function parseStepText(current, steps, mobileStepLabelTemplate) {
  return React.createElement("span", null, mobileStepLabelTemplate.replace('%{current}', current < steps.length ? current + 1 : steps.length).replace('%{total}', steps.length));
};

var getStepLabel = function getStepLabel(current, steps) {
  return current < steps.length ? steps[current] : steps[steps.length - 1];
};
/**
 * Show the current position in a sequence of steps.
 *
 * @version ./package.json
 */


var StepTracker = function StepTracker(_ref) {
  var current = _ref.current,
      steps = _ref.steps,
      copy = _ref.copy,
      mobileStepLabelTemplate = _ref.mobileStepLabelTemplate,
      rest = objectWithoutProperties(_ref, ["current", "steps", "copy", "mobileStepLabelTemplate"]);

  if (mobileStepLabelTemplate && copy === undefined) {
    deprecate('core-step-tracker', 'The `mobileStepLabelTemplate` prop, along with its default copy, is deprecated. Please use the `copy` prop. The `copy` prop will be required in the next major release.');
  }

  var stepText = parseStepText(current, steps, getCopy(stepTrackerText, copy).mobileStepLabel || mobileStepLabelTemplate);
  var stepLabel = getStepLabel(current, steps);
  return React.createElement(StyledStepBg, _extends_1({}, safeRest(rest), {
    "data-testid": "stepTrackerContainer"
  }), React.createElement(FlexGrid, null, React.createElement(FlexGrid.Row, null, React.createElement(FlexGrid.Col, {
    xs: 12
  }, React.createElement(StyledStepContainer, null, steps.map(function (label, index) {
    return React.createElement(Step, {
      status: current,
      label: label,
      stepNumber: index + 1,
      stepIndex: index,
      key: label,
      "data-testid": "step-".concat(index)
    });
  })))), React.createElement(FlexGrid.Row, null, React.createElement(FlexGrid.Col, {
    xs: 12,
    md: 0
  }, React.createElement(StyledMobileLabel, null, React.createElement(Text, {
    "data-testid": "mobileStepLabel"
  }, stepText, " ", stepLabel))))));
};

StepTracker.propTypes = {
  /**
   * The active step. The minimum value is 0, while the maximum value is the length of the steps prop.
   */
  current: PropTypes.number.isRequired,

  /**
   * The steps as an array of strings.
   */
  steps: PropTypes.array.isRequired,

  /**
   * @since 4.0.0
   *
   * Setting for text to display current step progress on mobile devices.
   * Use the `copy` prop to either select provided English or French copy by passing 'en' or 'fr' respectively.
   *
   * To provide your own, pass a JSON object with the key `mobileStepLabel`.
   * Use %current to place the current step and use %total to place the total amount of steps.
   *
   * This prop will be *required* when `mobileStepLabelTemplate` is removed.
   */
  copy: PropTypes.oneOfType([PropTypes.oneOf(['en', 'fr']), PropTypes.shape({
    mobileStepLabel: PropTypes.string
  })]),

  /**
   * @deprecated The same functionality with built-in defaults can be used via the `copy` prop.
   *
   * String for text to display current step progress on mobile devices.
   * Use %current to place the current step and use %total to place the total amount of steps.
   */
  mobileStepLabelTemplate: PropTypes.string
};
StepTracker.defaultProps = {
  copy: undefined,
  mobileStepLabelTemplate: 'Step %{current} of %{total}:'
};

export default StepTracker;
