'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var styled = _interopDefault(require('styled-components'));
var A11yContent = _interopDefault(require('@tds/core-a11y-content'));
var sharedStyles = require('@tds/shared-styles');
var utilHelpers = require('@tds/util-helpers');

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

/* eslint-disable import/prefer-default-export */
var deprecate = function deprecate(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] [Deprecate] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};

// colours
var colorTelusPurple = '#4b286d';
var colorAccessibleGreen = '#2B8000';
var colorWhite = '#fff'; // grey
var colorCardinal = '#c12335';

var colorPrimary = colorAccessibleGreen;
var colorSecondary = colorTelusPurple; // icons

var colorIconPrimary = colorPrimary;
var colorIconSecondary = colorSecondary;

var icons = {
  default: {
    fontFamily: "'TELUS Core Icons'"
    /* stylelint-disable-line font-family-no-missing-generic-family-keyword */
    ,
    display: 'inline-block',
    fontWeight: 'normal',
    fontStyle: 'normal',
    speak: 'none',
    textDecoration: 'inherit',
    textTransform: 'none',
    textRendering: 'auto',
    '-webkit-font-smoothing': 'antialiased',
    '-moz-osx-font-smoothing': 'grayscale',
    lineHeight: 1,
    verticalAlign: 'middle'
  },
  caretDown: {
    '&::before': {
      content: "'\f105'"
    }
  },
  caretUp: {
    '&::before': {
      content: "'\f106'"
    }
  },
  checkmark: {
    '&::before': {
      content: "'\f101'"
    }
  },
  chevron: {
    '&::before': {
      content: "'\f107'"
    }
  },
  leftChevron: {
    '&::before': {
      content: "'\f107'",
      display: 'inline-block',
      transform: 'rotate(-180deg) translateY(1.5px)'
    }
  },
  exclamationPointCircle: {
    '&::before': {
      content: "'\f103'"
    }
  },
  expander: {
    '&::before': {
      content: "'\f113'"
    }
  },
  hamburger: {
    '&::before': {
      content: "'\f112'"
    }
  },
  location: {
    '&::before': {
      content: "'\f110'"
    }
  },
  minus: {
    '&::before': {
      content: "'\f109'"
    }
  },
  plus: {
    '&::before': {
      content: "'\f108'"
    }
  },
  questionMarkCircle: {
    '&::before': {
      content: "'\f102'"
    }
  },
  spyglass: {
    '&::before': {
      content: "'\f111'"
    }
  },
  times: {
    '&::before': {
      content: "'\f104'"
    }
  }
};

var getColour = function getColour(variant) {
  switch (variant) {
    case 'primary':
      return colorIconPrimary;

    case 'secondary':
      return colorIconSecondary;

    case 'inverted':
      return colorWhite;

    case 'error':
      return colorCardinal;

    default:
      return undefined;
  }
};

var iconSymbol = function iconSymbol(_ref) {
  var symbol = _ref.symbol;
  return _extends_1({}, icons.default, {}, icons[symbol]);
};

var iconVariant = function iconVariant(_ref2) {
  var variant = _ref2.variant;
  return {
    color: getColour(variant)
  };
};

var iconSize = function iconSize(_ref3) {
  var iSize = _ref3.iSize;
  return {
    fontSize: utilHelpers.pixelToRem(iSize)
  };
};

var StyledIcon = styled.i.withConfig({
  displayName: "Icon__StyledIcon",
  componentId: "sc-1g20dn8-0"
})(iconSymbol, iconVariant, iconSize);

var Icon = function Icon(_ref4) {
  var symbol = _ref4.symbol,
      variant = _ref4.variant,
      size = _ref4.size,
      rest = objectWithoutProperties(_ref4, ["symbol", "variant", "size"]);

  return React__default.createElement(StyledIcon, _extends_1({}, utilHelpers.safeRest(rest), {
    symbol: symbol,
    variant: variant,
    iSize: size
  }));
};

Icon.propTypes = {
  symbol: PropTypes.oneOf(['caretDown', 'caretUp', 'checkmark', 'chevron', 'leftChevron', 'exclamationPointCircle', 'expander', 'hamburger', 'location', 'minus', 'plus', 'questionMarkCircle', 'spyglass', 'times']).isRequired,
  variant: PropTypes.oneOf(['primary', 'secondary', 'inverted', 'error']),
  size: PropTypes.oneOf([16, 20, 24, 32, 48])
};
Icon.defaultProps = {
  variant: undefined,
  size: 24
};

var mobileDeviceTapArea = 32; // https://www.w3.org/TR/mobile-accessibility-mapping/#touch-target-size-and-spacing

var touchAreaStyles = function touchAreaStyles(iconSize) {
  var length = (mobileDeviceTapArea - iconSize) / 2;
  return {
    padding: "".concat(length, "px"),
    margin: "-".concat(length, "px")
  };
};

var StandaloneIconClickable = styled.button.withConfig({
  displayName: "StandaloneIcon__StandaloneIconClickable",
  componentId: "ukibfn-0"
})(sharedStyles.buttons.noStyle);
/**
 * @deprecated An icon that has meaning within the context of the page, which should be communicated to screen readers.
 *
 * @version ./package.json
 */

var StandaloneIcon = function StandaloneIcon(_ref) {
  var symbol = _ref.symbol,
      variant = _ref.variant,
      size = _ref.size,
      onClick = _ref.onClick,
      a11yText = _ref.a11yText,
      innerRef = _ref.innerRef,
      rest = objectWithoutProperties(_ref, ["symbol", "variant", "size", "onClick", "a11yText", "innerRef"]);

  React.useEffect(function () {
    deprecate('@tds/core-standalone-icon', 'The StandaloneIcon component is deprecated. Please use a InteractiveIcon instead.');
  }, []);
  var iconProps = {
    symbol: symbol,
    variant: variant,
    size: size
  };

  if (onClick) {
    var needsExpandedTouchArea = size < mobileDeviceTapArea;
    return React__default.createElement(StandaloneIconClickable, _extends_1({}, utilHelpers.safeRest(rest), {
      ref: innerRef,
      onClick: onClick,
      style: needsExpandedTouchArea ? touchAreaStyles(size) : undefined
    }), React__default.createElement(Icon, iconProps, React__default.createElement(A11yContent, null, a11yText)));
  }

  return React__default.createElement(Icon, _extends_1({}, utilHelpers.safeRest(rest), iconProps));
};

StandaloneIcon.propTypes = {
  /**
   * Name of the icon symbol.
   */
  symbol: PropTypes.oneOf(['caretDown', 'caretUp', 'checkmark', 'chevron', 'leftChevron', 'exclamationPointCircle', 'expander', 'hamburger', 'location', 'minus', 'plus', 'questionMarkCircle', 'spyglass', 'times']).isRequired,

  /**
   * The appearance of the Icon.
   */
  variant: PropTypes.oneOf(['primary', 'secondary', 'inverted', 'error']),

  /**
   * The icon size in pixels.
   */
  size: PropTypes.oneOf([16, 20, 24, 32, 48]),

  /**
   * Pass a handler to the icon to make it interactive. Wraps the icon with a `<button>`.
   */
  onClick: PropTypes.func,

  /**
   * A description of the icon for screen readers.
   */
  a11yText: PropTypes.string.isRequired,

  /* @ignore */
  innerRef: PropTypes.object
};
StandaloneIcon.defaultProps = {
  variant: undefined,
  size: 24,
  onClick: undefined,
  innerRef: undefined
};

module.exports = StandaloneIcon;
