'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var styled = _interopDefault(require('styled-components'));
var Box = _interopDefault(require('@tds/core-box'));
var sharedStyles = require('@tds/shared-styles');
var utilHelpers = require('@tds/util-helpers');

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

var StyledFeedback = styled(function (_ref) {
  var feedback = _ref.feedback,
      rest = objectWithoutProperties(_ref, ["feedback"]);

  return React.createElement(Box, rest);
})(function (_ref2) {
  var feedback = _ref2.feedback;
  return _extends_1({}, sharedStyles.borders.rounded, {}, feedback === 'success' && sharedStyles.messaging.success, {}, feedback === 'error' && sharedStyles.messaging.error, {}, feedback === undefined && sharedStyles.messaging.standard);
});
/**
 * A feedback box commonly used with form fields.
 *
 * @version ./package.json
 */

var InputFeedback = function InputFeedback(_ref3) {
  var feedback = _ref3.feedback,
      children = _ref3.children,
      rest = objectWithoutProperties(_ref3, ["feedback", "children"]);

  return React.createElement(StyledFeedback, _extends_1({}, utilHelpers.safeRest(rest), {
    inset: 3,
    role: feedback === 'error' ? 'alert' : null,
    feedback: feedback
  }), children);
};

InputFeedback.propTypes = {
  /**
   * A feedback state that changes the background colour.
   */
  feedback: PropTypes.oneOf(['success', 'error']),

  /**
   * The content. Can be text, any HTML element, or any component.
   */
  children: PropTypes.node.isRequired
};
InputFeedback.defaultProps = {
  feedback: undefined
};

module.exports = InputFeedback;
