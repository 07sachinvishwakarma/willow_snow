'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var Text$1 = _interopDefault(require('@tds/core-text'));
var Heading$1 = _interopDefault(require('@tds/core-heading'));
var Image$1 = _interopDefault(require('@tds/core-image'));
var styled = _interopDefault(require('styled-components'));
var coreColours = require('@tds/core-colours');
var utilHelpers = require('@tds/util-helpers');
var sharedStyles = require('@tds/shared-styles');

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

var taggedTemplateLiteral = _taggedTemplateLiteral;

function _templateObject2() {
  var data = taggedTemplateLiteral(["\n", "\n\n  width: ", ";\n\n  max-width: 100%;\n  display: inline-block;\n  overflow: hidden;\n\n  background-color: ", ";\n  background-repeat: no-repeat;\n  background-position: 0 0;\n  background-size: 200% 100%;\n  background-image: linear-gradient(\n    to right,\n    ", ",\n    ", ",\n    ", "\n  );\n\n  animation-name: ", ";\n  animation-duration: 2s;\n  animation-delay: 2s;\n  animation-iteration-count: infinite;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = taggedTemplateLiteral(["\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -100% 0;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var keyframes = require('styled-components').keyframes;

var SIZES = {
  xs: 18,
  sm: 24,
  md: 36,
  lg: 48,
  xl: 64
};
var skeletonTextShimmer = keyframes(_templateObject()); // Not using object notation as styled-components does not currently support animations in objects

var StyledSkeleton = styled.span(_templateObject2(), function (_ref) {
  var safeSize = _ref.safeSize;
  return "\n  height: ".concat(safeSize, "px;\n  min-width: ").concat(safeSize, "px;\n  border-radius: ").concat(safeSize / 2, "px;");
}, function (_ref2) {
  var isFixedCharacterWidth = _ref2.isFixedCharacterWidth,
      characters = _ref2.characters,
      safeSize = _ref2.safeSize;
  return "".concat(isFixedCharacterWidth ? "".concat(characters * safeSize, "px") : '100%');
}, coreColours.colorGainsboro, coreColours.colorGainsboro, coreColours.colorAthensGrey, coreColours.colorGainsboro, skeletonTextShimmer);
/**
 * Skeleton component for mocking content while it is loading.
 *
 * @version ./package.json
 */

var Skeleton = function Skeleton(_ref3) {
  var characters = _ref3.characters,
      size = _ref3.size,
      rest = objectWithoutProperties(_ref3, ["characters", "size"]);

  var parsedCharacters = parseInt(characters, 10);
  var safeCharacters = parsedCharacters || 0;
  var safeSize = SIZES[size] || SIZES.xs;
  var isFixedCharacterWidth = safeCharacters > 0;
  return React__default.createElement(StyledSkeleton, _extends_1({}, utilHelpers.safeRest(rest), {
    characters: characters,
    safeSize: safeSize,
    isFixedCharacterWidth: isFixedCharacterWidth,
    "aria-busy": "true"
  }));
};

Skeleton.propTypes = {
  /** Number of "M" characters to emulate (full width & height per size) <br />
   <em>NOTE: default and overflow states both assume to 100% width instead</em> */
  characters: PropTypes.number,

  /** Size of text to emulate (line height in pixels) */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])
};
Skeleton.defaultProps = {
  characters: 0,
  size: 'xs'
};

function SkeletonRenderer(props) {
  var skeleton = React.useContext(SkeletonContext);
  return skeleton.show ? props.skeleton() : props.render();
}

var getName = function getName(comp) {
  return comp.displayName || comp.name || 'Component';
};

var withSkeleton = function withSkeleton(SkeletonComponent) {
  return function (Component) {
    return function wrapper(_ref) {
      var _skeleton = _ref.skeleton,
          props = objectWithoutProperties(_ref, ["skeleton"]);

      wrapper.displayName = "withSkeleton(".concat(getName(SkeletonComponent), ")");
      wrapper.propTypes = {
        skeleton: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])
      };
      wrapper.defaultProps = {
        skeleton: undefined
      };
      return React__default.createElement(SkeletonRenderer, {
        skeleton: function skeleton() {
          return React__default.createElement(SkeletonComponent, _extends_1({
            skeleton: _skeleton
          }, props));
        },
        render: function render() {
          return React__default.createElement(Component, props);
        }
      });
    };
  };
};

var StyledHeadingSkeleton = styled.div({
  maxWidth: '100%',
  display: 'inline-block',
  overflow: 'hidden'
});

var HeadingSkeleton = function HeadingSkeleton(_ref) {
  var skeleton = _ref.skeleton,
      rest = objectWithoutProperties(_ref, ["skeleton"]);

  if (!skeleton) {
    return React__default.createElement(Heading$1, rest);
  }

  var level = rest.level;
  var levels = {
    h1: 'lg',
    h2: 'md',
    h3: 'sm',
    h4: 'xs'
  };
  var characters = skeleton.characters;

  if (skeleton === true) {
    characters = undefined;
  }

  return React__default.createElement(StyledHeadingSkeleton, null, React__default.createElement(Skeleton, {
    characters: characters,
    size: level ? levels[level] : 'md'
  }));
};

HeadingSkeleton.propTypes = {
  skeleton: PropTypes.oneOfType([PropTypes.shape({
    characters: PropTypes.number
  }), PropTypes.bool])
};
HeadingSkeleton.defaultProps = {
  skeleton: undefined
};
var Heading = withSkeleton(HeadingSkeleton)(Heading$1);

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var arrayWithoutHoles = _arrayWithoutHoles;

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

var iterableToArray = _iterableToArray;

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var nonIterableSpread = _nonIterableSpread;

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

var toConsumableArray = _toConsumableArray;

var StyledTextSkeleton = styled.div({
  width: '100%',
  display: 'inline-block',
  overflow: 'hidden'
});

var TextSkeleton = function TextSkeleton(_ref) {
  var skeleton = _ref.skeleton,
      rest = objectWithoutProperties(_ref, ["skeleton"]);

  if (!skeleton) {
    return React__default.createElement(Text$1, rest);
  }

  var skSizes = {
    large: 'md',
    base: 'xs',
    small: 'xs',
    medium: 'sm'
  };
  var size = skeleton.size;
  var lines = skeleton.lines,
      characters = skeleton.characters;
  var skSize = skSizes[size] || 'xs';

  if (skeleton === true) {
    lines = 1;
    characters = undefined;
  }

  if (!lines || lines < 1) {
    lines = 1;
  }

  if (lines === 1) {
    return React__default.createElement(Skeleton, {
      size: skSize,
      characters: characters
    });
  }

  return React__default.createElement(StyledTextSkeleton, null, toConsumableArray(Array(lines)).map(function (_, idx) {
    return (// eslint-disable-next-line react/no-array-index-key
      React__default.createElement("div", {
        key: idx
      }, React__default.createElement(Skeleton, {
        size: skSize,
        characters: characters
      }))
    );
  }));
};

TextSkeleton.propTypes = {
  skeleton: PropTypes.oneOfType([PropTypes.shape({
    characters: PropTypes.number,
    lines: PropTypes.number
  }), PropTypes.bool])
};
TextSkeleton.defaultProps = {
  skeleton: undefined
};
var Text = withSkeleton(TextSkeleton)(Text$1);

function _templateObject3() {
  var data = taggedTemplateLiteral(["\n  ", "\n  width: ", "px;\n  height: ", "px;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$1() {
  var data = taggedTemplateLiteral(["\n  ", "\n  display: inline-block;\n  overflow: hidden;\n  max-width: 100%;\n  border-radius: 50%;\n\n  background-color: ", ";\n  background-repeat: no-repeat;\n  background-position: 0 0;\n  background-size: 200% 100%;\n  background-image: linear-gradient(\n    to right,\n    ", ",\n    ", ",\n    ", "\n  );\n  animation-name: ", ";\n  animation-duration: 2s;\n  animation-delay: 2s;\n  animation-iteration-count: infinite;\n"]);

  _templateObject2$1 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$1() {
  var data = taggedTemplateLiteral(["\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -100% 0;\n  }\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}

var keyframes$1 = require('styled-components').keyframes;

var skeletonTextShimmer$1 = keyframes$1(_templateObject$1()); // Not using object notation as styled-components does not currently support animations in objects

var getWidthHeight = function getWidthHeight(_ref) {
  var rest = _extends_1({}, _ref);

  return "\n  width: ".concat(rest.width * 0.8, "px;\n  height: ").concat(rest.height * 0.8, "px;\n");
};

var StyledImageSkeleton = styled.div(_templateObject2$1(), getWidthHeight, coreColours.colorGainsboro, coreColours.colorGainsboro, coreColours.colorAthensGrey, coreColours.colorGainsboro, skeletonTextShimmer$1);
var StyledRoundedCornersImageSkeleton = styled(StyledImageSkeleton)(_templateObject3(), sharedStyles.borders.rounded, function (props) {
  return props.width;
}, function (props) {
  return props.height;
});

var ImageSkeleton = function ImageSkeleton(_ref2) {
  var skeleton = _ref2.skeleton,
      rest = objectWithoutProperties(_ref2, ["skeleton"]);

  if (!skeleton) {
    return React__default.createElement(Image$1, rest);
  }

  var rounded = rest.rounded;

  if (rounded === 'corners') {
    return React__default.createElement(StyledRoundedCornersImageSkeleton, utilHelpers.safeRest(rest));
  }

  return React__default.createElement(StyledImageSkeleton, utilHelpers.safeRest(rest));
};

ImageSkeleton.propTypes = {
  skeleton: PropTypes.bool
};
ImageSkeleton.defaultProps = {
  skeleton: false
};
var Image = withSkeleton(ImageSkeleton)(Image$1);

var Skeletons = {
  Heading: Heading,
  Text: Text,
  Image: Image
};

var AutoSkeletonizer = function AutoSkeletonizer(children) {
  var skeletonChildren = React__default.Children.map(children, function (childElement) {
    var child = childElement;

    if (child === null) {
      return null;
    }

    if (child.props && 'children' in child.props) {
      child = React__default.cloneElement(child, {
        children: AutoSkeletonizer(child.props.children)
      });
    }

    if (child.props && 'skeleton' in child.props && typeof child.props.skeleton === 'function') {
      var EnhancedChild = withSkeleton(child.props.skeleton)(function () {
        return child;
      });
      return React__default.createElement(EnhancedChild, child.props);
    }

    if (child.type === Text$1) {
      return React__default.createElement(Skeletons.Text, child.props);
    }

    if (child.type === Heading$1) {
      return React__default.createElement(Skeletons.Heading, child.props);
    }

    if (child.type === Image$1) {
      return React__default.createElement(Skeletons.Image, child.props);
    }

    return child;
  });
  return skeletonChildren;
};

var SkeletonContext = React.createContext({
  show: true
});

function SkeletonProvider(_ref) {
  var show = _ref.show,
      children = _ref.children,
      rest = objectWithoutProperties(_ref, ["show", "children"]);

  return React__default.createElement(SkeletonContext.Provider, _extends_1({
    value: {
      show: show
    }
  }, rest), AutoSkeletonizer(children));
}

SkeletonProvider.propTypes = {
  show: PropTypes.bool,
  children: PropTypes.node
};
SkeletonProvider.defaultProps = {
  show: true,
  children: null
};

exports.SkeletonContext = SkeletonContext;
exports.default = SkeletonProvider;
