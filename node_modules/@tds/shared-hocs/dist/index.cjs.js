'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

var selector = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"]), audio[controls], video[controls], [contenteditable]:not([contenteditable=false])';

var getFocusable = function getFocusable(c) {
  return c.querySelectorAll(selector);
};

var withFocusTrap = function withFocusTrap(Component) {
  var WithFocusTrap = function WithFocusTrap(props) {
    var componentRef = React.useRef(null); // To force VoiceOver to treat the dialog as a modal we need to set the aria-label attribute.
    // Also the modal-dialog html needs to be inserted into the page using JS after the page loads (this isn't a real problem)

    var a11yText = props.a11yText,
        autofocus = props.autofocus,
        rest = objectWithoutProperties(props, ["a11yText", "autofocus"]);

    React.useEffect(function () {
      if (autofocus) {
        // setting the focus to the first focusable element on mount only
        var focusableElements = componentRef.current && getFocusable(componentRef.current)[0];
        if (focusableElements) focusableElements.focus();
      }
    }, [autofocus]);

    var handleFocus = function handleFocus(isEnd) {
      return function () {
        var focusableElements = getFocusable(componentRef.current);
        focusableElements[isEnd ? 0 : focusableElements.length - 1].focus();
      };
    };

    return React__default.createElement("div", {
      role: "dialog",
      "aria-modal": "true",
      "aria-label": a11yText
    }, React__default.createElement("div", {
      onFocus: handleFocus(false),
      tabIndex: 0
    }), React__default.createElement("div", {
      ref: componentRef
    }, React__default.createElement(Component, rest)), React__default.createElement("div", {
      onFocus: handleFocus(true),
      tabIndex: 0
    }));
  };

  WithFocusTrap.propTypes = {
    a11yText: PropTypes.string,
    autofocus: PropTypes.bool
  };
  WithFocusTrap.defaultProps = {
    a11yText: 'modal dialog',
    autofocus: true
  };
  return WithFocusTrap;
};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

var withStyledComponent = function withStyledComponent(StyledComponent) {
  return function (Component) {
    return function (props) {
      var WithStyledComponent = React__default.createElement(Component, _extends_1({}, props, {
        styledComponent: StyledComponent
      }));
      return WithStyledComponent;
    };
  };
};

var getDisplayName = function getDisplayName(Component) {
  return Component.displayName || Component.name || 'Component';
};

var withForwardedRef = function withForwardedRef(Component) {
  var WithForwardedRef = React.forwardRef(function (props, ref) {
    return React__default.createElement(Component, _extends_1({}, props, {
      forwardedRef: ref
    }));
  });
  WithForwardedRef.displayName = "WithForwardedRef(".concat(getDisplayName(Component), ")");
  return WithForwardedRef;
};

exports.withFocusTrap = withFocusTrap;
exports.withForwardedRef = withForwardedRef;
exports.withStyledComponent = withStyledComponent;
