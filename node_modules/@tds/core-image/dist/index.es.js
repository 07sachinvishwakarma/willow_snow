import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { borders } from '@tds/shared-styles';
import { safeRest } from '@tds/util-helpers';

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

/* eslint-disable import/prefer-default-export */
var warn = function warn(componentName, message) {
  if (process.env.NODE_ENV === 'production') {
    return;
  }

  console.warn("[TDS] ".concat(componentName, ": ").concat(message)); // eslint-disable-line no-console
};

var StyledImage = styled.img.withConfig({
  displayName: "Image__StyledImage",
  componentId: "b16p20-0"
})({
  height: 'auto',
  maxWidth: '100%'
});
var StyledRoundedImage = styled(StyledImage)(borders.rounded);
var StyledCircularImage = styled(StyledImage)(borders.circular);
/**
 * @version ./package.json
 */

var Image = function Image(_ref) {
  var src = _ref.src,
      width = _ref.width,
      height = _ref.height,
      alt = _ref.alt,
      rounded = _ref.rounded,
      rest = objectWithoutProperties(_ref, ["src", "width", "height", "alt", "rounded"]);

  var isCircle = rounded === 'circle';
  var isCorners = rounded === 'corners';
  var isSquare = width === height;

  if (isCircle && !isSquare) {
    warn('Image', 'rounded="circle" is not supported for non-square images. Please provide a square image, otherwise the resulting shape will not be a circle.');
  }

  var ImageComponent;

  if (isCircle) {
    ImageComponent = StyledCircularImage;
  } else if (isCorners) {
    ImageComponent = StyledRoundedImage;
  } else {
    ImageComponent = StyledImage;
  }

  return React.createElement(ImageComponent, _extends_1({}, safeRest(rest), {
    src: src,
    width: width,
    height: height,
    alt: alt
  }));
};

Image.propTypes = {
  /**
   * The src attribute for the HTML img element.
   */
  src: PropTypes.string.isRequired,

  /**
   * The alt attribute for the HTML img element. Setting this attribute to an empty string (alt="") indicates that this image is not a key part of the content, and that non-visual browsers may omit it from rendering.
   */
  alt: PropTypes.string.isRequired,

  /**
   * The image's width.
   */
  width: PropTypes.number.isRequired,

  /**
   * The image's height.
   */
  height: PropTypes.number.isRequired,

  /**
   * Make image render as a circle or with rounded corners.
   */
  rounded: PropTypes.oneOf(['circle', 'corners'])
};
Image.defaultProps = {
  rounded: undefined
};

export default Image;
