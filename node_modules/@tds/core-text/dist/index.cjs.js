'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var styled = _interopDefault(require('styled-components'));
var typography = require('@tds/shared-typography');
var utilHelpers = require('@tds/util-helpers');

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

var textColor = function textColor(_ref) {
  var invert = _ref.invert;
  return invert ? typography.invertedColor : typography.color;
};

var textInheritColor = function textInheritColor(_ref2) {
  var inheritColor = _ref2.inheritColor;
  return inheritColor ? {
    color: 'inherit'
  } : undefined;
};

var textSize = function textSize(_ref3) {
  var size = _ref3.size;
  return typography[size];
};

var textBold = function textBold(_ref4) {
  var bold = _ref4.bold,
      size = _ref4.size;
  return bold ? typography.boldFont : typography["".concat(size, "Font")];
};

var textBlock = function textBlock(_ref5) {
  var block = _ref5.block;
  return block ? typography.blockText : undefined;
}; // This named export is not guaranteed to be maintained and may be removed at any time.


var StyledText = styled.span.withConfig({
  displayName: "Text__StyledText",
  componentId: "sc-1m0rr67-0"
})(textColor, textInheritColor, textSize, textBold, textBlock, {
  sup: typography.sup
});
/**
 * Inline text usually as an HTML `<span>` element.
 *
 * @version ./package.json
 */

var Text = function Text(_ref6, context) {
  var children = _ref6.children,
      size = _ref6.size,
      invert = _ref6.invert,
      rest = objectWithoutProperties(_ref6, ["children", "size", "invert"]);

  return React.createElement(utilHelpers.DependentIconSizeContext.Provider, {
    value: {
      paragraphSize: size,
      invert: invert
    }
  }, React.createElement(StyledText, _extends_1({}, utilHelpers.safeRest(rest), {
    size: size,
    invert: invert,
    inheritColor: context.inheritColor
  }), children));
};

Text.propTypes = {
  /**
   * If true, renders a block level element.
   * Otherwise, renders an inline element.
   */
  block: PropTypes.bool,

  /**
   * Embolden text without conveying any special importance or relevance.
   */
  bold: PropTypes.bool,

  /**
   * The font size.
   */
  size: PropTypes.oneOf(['base', 'small', 'medium', 'large']),

  /**
   * Invert the text color to appear light on dark backgrounds.
   */
  invert: PropTypes.bool,

  /**
   * The content. Can be text, other components, or HTML elements.
   */
  children: PropTypes.node.isRequired
};
Text.defaultProps = {
  block: false,
  bold: false,
  size: 'base',
  invert: false
};
Text.contextTypes = {
  inheritColor: PropTypes.bool
};

exports.StyledText = StyledText;
exports.default = Text;
