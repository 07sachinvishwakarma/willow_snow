'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var styled = _interopDefault(require('styled-components'));
var PropTypes = _interopDefault(require('prop-types'));
var utilPropTypes = require('@tds/util-prop-types');
var utilHelpers = require('@tds/util-helpers');

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

var spacing = {
  mobile: {
    0: '0rem',
    1: '0.25rem',
    2: '0.5rem',
    3: '1rem',
    4: '1.5rem',
    5: '2rem',
    6: '2.5rem',
    7: '3rem',
    8: '4rem'
  },
  desktop: {
    0: '0rem',
    1: '0.25rem',
    2: '0.5rem',
    3: '1rem',
    4: '2rem',
    5: '3rem',
    6: '4rem',
    7: '4.5rem',
    8: '6rem'
  }
};
var convertToRem = function convertToRem(level, breakpoint) {
  if (['xs', 'sm'].indexOf(breakpoint) !== -1) {
    return spacing.mobile[level];
  }

  return spacing.desktop[level];
};

var inlineBetweenStyles = function inlineBetweenStyles(props) {
  return utilHelpers.handleResponsiveStyles({
    between: props.between,
    inline: props.inline
  }, function (_ref, breakpoint) {
    var between = _ref.between,
        inline = _ref.inline;
    var base = {
      display: between !== undefined ? 'flex' : 'block',
      flexDirection: inline ? 'row' : 'column'
    };

    if (between === undefined) {
      return base;
    }

    if (between === 'space-between') {
      return Object.assign(base, {
        justifyContent: 'space-between'
      });
    }

    var rem = convertToRem(between, breakpoint);
    return Object.assign(base, {
      '> *:not(:last-child)': _extends_1({}, inline ? {
        marginRight: rem
      } : {
        marginBottom: rem
      })
    });
  });
};

var horizontalStyles = function horizontalStyles(props) {
  return utilHelpers.handleResponsiveStyles({
    horizontal: props.horizontal
  }, function (_ref2, breakpoint) {
    var horizontal = _ref2.horizontal;

    if (horizontal === undefined) {
      return undefined;
    }

    var rem = convertToRem(horizontal, breakpoint);
    return {
      paddingLeft: rem,
      paddingRight: rem
    };
  });
};

var verticalStyles = function verticalStyles(props) {
  return utilHelpers.handleResponsiveStyles({
    vertical: props.vertical
  }, function (_ref3, breakpoint) {
    var vertical = _ref3.vertical;

    if (vertical === undefined) {
      return undefined;
    }

    var rem = convertToRem(vertical, breakpoint);
    return {
      paddingTop: rem,
      paddingBottom: rem
    };
  });
};

var insetStyles = function insetStyles(props) {
  return utilHelpers.handleResponsiveStyles({
    inset: props.inset
  }, function (_ref4, breakpoint) {
    var inset = _ref4.inset;

    if (inset === undefined) {
      return undefined;
    }

    var rem = convertToRem(inset, breakpoint);
    return {
      paddingTop: rem,
      paddingBottom: rem,
      paddingLeft: rem,
      paddingRight: rem
    };
  });
};

var belowStyles = function belowStyles(props) {
  return utilHelpers.handleResponsiveStyles({
    below: props.below
  }, function (_ref5, breakpoint) {
    var below = _ref5.below;

    if (below === undefined) {
      return undefined;
    }

    var rem = convertToRem(below, breakpoint);
    return {
      marginBottom: rem
    };
  });
};

var StyledBox = styled.div.attrs(function (_ref6) {
  var className = _ref6.className,
      tag = _ref6.tag;
  return {
    className: className,
    as: tag
  };
})(inlineBetweenStyles, horizontalStyles, verticalStyles, insetStyles, belowStyles);
/**
 * Apply spacing within or around components.
 *
 * @version ./package.json
 */

var Box = React.forwardRef(function (props, ref) {
  return React__default.createElement(StyledBox, _extends_1({}, props, {
    ref: ref
  }));
});
Box.displayName = 'Box';
Box.propTypes = {
  /**
   * Specify an HTML element to render, such as `section`.
   */
  tag: PropTypes.string,

  /**
   * Indent content from the container's top and bottom edge by applying padding.
   *
   * One of: `0,1,2,3,4,5,6,7,8` as a [**responsive prop**](#responsiveProps)
   */
  vertical: utilPropTypes.responsiveProps(PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8])),

  /**
   * Indent content from the container's left and right edge by applying padding.
   *
   * One of: `0,1,2,3,4,5,6,7,8` as a [**responsive prop**](#responsiveProps)
   */
  horizontal: utilPropTypes.responsiveProps(PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8])),

  /**
   * Indent content from all of the container's edges by applying padding.
   *
   * One of: `0,1,2,3,4,5,6,7,8` as a [**responsive prop**](#responsiveProps)
   */
  inset: utilPropTypes.responsiveProps(PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8])),

  /**
   * Indent content from the container's bottom edge by applying margin-bottom.
   *
   * One of: `0,1,2,3,4,5,6,7,8` as a [**responsive prop**](#responsiveProps)
   */
  below: utilPropTypes.responsiveProps(PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8])),

  /**
   * Create either a block or an inline stack, applying margin in between every direct child. Margin will not be
   * applied to the last component in the stack.
   *
   * By default, `between` will arrange the Box's children as a flex column. Combine with `inline` to arrange them
   * as a flex row.
   *
   * Use `space-between` to set an equal amount of space between all items, within the bounds of the parent.
   *
   * One of: `0,1,2,3,4,5,6,7,8,space-between` as a [**responsive prop**](#responsiveProps)
   */
  between: utilPropTypes.responsiveProps(PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 'space-between'])),

  /**
   * Arrange children in a row. Combine with `between` to apply margins in between the row's elements.
   *
   * One of: `true,false` as a [**responsive prop**](#responsiveProps)
   */
  inline: utilPropTypes.responsiveProps(PropTypes.bool),

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * The content. Can be text, any HTML element, or any component.
   */
  children: PropTypes.node.isRequired
};
Box.defaultProps = {
  inline: false,
  tag: 'div',
  vertical: undefined,
  horizontal: undefined,
  inset: undefined,
  below: undefined,
  between: undefined,
  className: undefined
};

exports.convertToRem = convertToRem;
exports.default = Box;
